# syntax=docker.io/docker/dockerfile:1

#
# 1. Install dependencies layer
#
FROM node:22-alpine AS deps

WORKDIR /app

# glibc compatibility for some native modules
RUN apk add --no-cache libc6-compat

# copy only manifests & install
COPY package.json yarn.lock* package-lock.json* pnpm-lock.yaml* .npmrc* ./
RUN \
  if [ -f yarn.lock ]; then \
      yarn --frozen-lockfile; \
  elif [ -f package-lock.json ]; then \
      npm ci; \
  elif [ -f pnpm-lock.yaml ]; then \
      corepack enable pnpm && pnpm install --frozen-lockfile; \
  else \
      echo "Lockfile not found." && exit 1; \
  fi

#
# 2. Dev image
#
FROM node:22-alpine AS dev

WORKDIR /app

# copy just node_modules from the deps stage
COPY --from=deps /app/node_modules ./node_modules

# expose Next.js default port
EXPOSE 3000

# dev‐mode env
ENV NODE_ENV=development
ENV HOST=0.0.0.0
ENV PORT=3000

# declare /app as a mountpoint
VOLUME ["/app"]

# run the Next.js dev server (hot‑reload)
CMD ["npm", "run", "dev"]
