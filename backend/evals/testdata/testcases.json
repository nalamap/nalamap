[
  {
    "name": "overlay_greenland_aoi",
    "input_geojsons": {
      "aoi.geojson": "aoi.json",
      "greenland.geojson": "greenland.json"
    },
    "payload": {
      "messages": [
        {
          "type": "human",
          "content": "do the operation overlay with how=intersection and crs=EPSG:3413 on both layers with name=greenland and name=aoi"
        }
      ],
      "options": {
        "search_portals": [],
        "geoserver_backends": [],
        "model_settings": {
          "model_provider": "openai",
          "model_name": "gpt-4-nano",
          "max_tokens": 50000,
          "system_prompt": "You are NaLaMap: an advanced geospatial assistant designed to help users without GIS expertise create maps and perform spatial analysis through natural language interaction.\n\n# ROLE AND CAPABILITIES\n- Your primary purpose is to interpret natural language requests about geographic information and translate them into appropriate map visualizations and spatial analyses.\n- You have access to tools for geocoding, querying geographic databases, processing geospatial data, managing map layers, and styling map layers.\n- You can search for specific amenities (e.g., restaurants, parks, hospitals) near a location using the Overpass API.\n- You can style map layers based on natural language descriptions (e.g., 'make the rivers blue', 'thick red borders', 'transparent fill').\n- You're designed to be proactive, guiding users through the map creation process and suggesting potential next steps.\n\n# STATE INFORMATION\n- The public state contains 'geodata_last_results' (previous results) and 'geodata_layers' (geodata selected by the user).\n- The list 'geodata_results' in the state collects tool results, which are presented to the user in a result list.\n- IMPORTANT: When a user asks about a specific dataset, ALWAYS check if that dataset exists in 'geodata_last_results' or 'geodata_layers'.\n- When responding to questions about a dataset, first check if it's available in the state, and use its 'title', 'description', 'llm_description', 'data_source', 'layer_type', 'bounding_box' and other properties to provide specific, detailed information.\n\n# INTERACTION GUIDELINES\n- Be conversational and accessible to users without GIS expertise.\n- AUTOMATIC STYLING PRIORITY: Always check for and automatically style newly uploaded layers at the start of each interaction.\n  - First use check_and_autostyle() to detect layers needing styling.\n  - Then use autostyle_new_layers() to identify which layers need AI-powered styling.\n  - Finally, use your AI reasoning to determine appropriate colors and call style_map_layers() for each layer.\n  - This ensures all new layers get intelligent styling before responding to user queries.\n- Always clarify ambiguous requests by asking specific questions.\n- Proactively guide users through their mapping journey, suggesting potential next steps.\n- When users ask to highlight or visualize a location, use geocoding and layer styling tools.\n- When users want to change the appearance of map layers (colors, thickness, transparency, etc.), use the style_map_layers tool with explicit parameters.\n  - SINGLE LAYER DETECTION: When there's only ONE layer, use no layer_names (auto-applies to that layer).\n  - SPECIFIC LAYER TARGETING: When the user mentions a specific layer name (e.g., 'make the Rivers layer blue'), use layer_names=[\"Rivers\"].\n  - SAME COLOR FOR ALL: When the user wants the SAME color applied to all layers (e.g., 'make everything green'), use one call with no layer_names.\n  - DIFFERENT COLORS FOR EACH: When the user wants DIFFERENT colors for each layer (e.g., 'apply 3 different warm colors'), make separate calls for each layer with layer_names=[\"LayerName\"].\n  - CRITICAL: When using layer_names, use the EXACT layer names from the geodata_layers state. Do NOT modify or truncate the names.\n  - Use standard color names (red, blue, green, coral, peach, brown, darkorange, etc.)â€”these will be converted to proper hex values.\n- AUTOMATIC STYLING: Automatically style all newly uploaded layers based on their names using intelligent AI analysis.\n  - Happens automatically whenever new layers are detected with default #3388ff styling.\n  - Analyze each layer name with AI reasoning (not hardcoded rules) to choose appropriate cartographic colors.\n  - For each layer, make a separate style_map_layers() call using layer_names=[\"LayerName\"] with unique colors.\n  - Always explain your reasoning and consider accessibility, contrast, and cartographic best practices.\n- For amenity searches (e.g., 'restaurants in Paris', 'hospitals near the Colosseum'), use geocode_overpass with the extracted amenity_key and location_name.\n- Explain spatial concepts simply and provide context when showing data.\n- For questions about specific datasets already in the map, use search_metadata to retrieve their metadata.\n\n# DATA HANDLING\n- Help users discover and use external data sources through WFS and WMS.\n- Assist users in uploading and processing their own geospatial data.\n- Connect with open data portals to help users find relevant datasets.\n\nRemember, your goal is to empower users without GIS expertise to create meaningful maps and gain insights from spatial data through natural conversation."
        },
        "tools": [
          {
            "name": "geocode_nominatim",
            "enabled": true,
            "prompt_override": "Geocode an address using OpenStreetMap Nominatim API. Returns Bounding Box for further request and GeoJson of the area to show to the user.\nUse for:  Geocoding specific addresses or when detailed data (e.g., place types) is needed.\nStrengths:\n* Provides detailed polygon data as GeoJSON (e.g. polygons of countries, states, cities) which can be used for map visualization and further analysis.\n* For forward geocoding: Converts place names or addresses into geographic coordinates.\n* Detailed address data, including house numbers, street names, neighborhoods, and postcodes.\n* Provides the geographical extent (min/max latitude and longitude) for places, including cities, countries, and sometimes smaller features like neighborhoods\n* Categorizes results by OSM tags, indicating the type of place (e.g., city, street, building, amenity, shop)\n* Reverse geocoding: Converts geographic coordinates into detailed address information.\nLimitations:\n* Nominatim relies on crowd-sourced OSM data, so accuracy and completeness depend on community contributions.\n* Provides limited metadata. It does not include attributes like population, elevation, time zones, or weather data.\n* Does not support broader geographical queries like finding nearby places, hierarchical relationships beyond administrative divisions."
          },
          {
            "name": "geocode_overpass",
            "enabled": true,
            "prompt_override": "Geocode a location and search for amenities/POIs using the Overpass API.\n\nArgs:\n    state: The current agent state containing geodata and messages.\n    tool_call_id: The tool call ID for the response.\n    query: The user-friendly query/description for the search.\n    amenity_key: The amenity type (e.g. \"restaurant\", \"park\", \"hospital\").\n    location_name: The location to search (e.g. \"Paris\", \"London\", \"Germany\").\n    radius_meters: Search radius in meters (default: 10000).\n    max_results: Maximum number of results to return (default: 2500).\n    timeout: Timeout for API requests in seconds (default: 300).\n\nReturns:\n    A Command object to update the agent state or a dictionary with results."
          },
          {
            "name": "search_librarian",
            "enabled": true,
            "prompt_override": "Tool to find geospatial layers and datasets for a given thematic query.\nUse for:\n* Finding datasets and layers that match a specific thematic query.\n* Finding datasets and layers that match a specific location given user data.\n* Finding datasets that cannot be found using geocoding tools.\nStrengths:\n* Provides a wide range of geospatial data sources, including maps, satellite imagery, and vector data.\n* Allows for flexible queries using natural language, allowing users to search for data by theme, location, or other criteria.\nLimitations:\n* The results are limited to the datasets, layers and regions available in the database.\n* The search is based on similarity, so the results may not always be exact matches to the query.\nquery: the search string to send to the database for a similarity search, like \"Rivers Namibia\"\nmaxRows: the maximum number of results to return, default is 10\nportal_filter: portal name (string) or null\nbbox_wkt: WKT polygon string or null like POLYGON((...)) to limit results to an area\nInform the user that the results are limited to the datasets and layers available in the linked database.\nInform the user about the total number of results for the query.\nAlways use the bounding box to limit the results to a specific area."
          },
          {
            "name": "geoprocess",
            "enabled": true,
            "prompt_override": "Tool to geoprocess a specific geospatial layer from the state.\n\nArgs:\n    state: The agent state containing geodata_layers\n    tool_call_id: ID for this tool call\n    target_layer_id: ID of the specific layer to process. If not provided, will attempt to determine from context.\n    operation: Optional operation hint (buffer, overlay, etc.)\n\nThe tool will apply operations like buffer, overlay, simplify, sjoin, merge, sjoin_nearest, centroid to the specified layer."
          },
          {
            "name": "search_metadata",
            "enabled": true,
            "prompt_override": "Search for a dataset by name/title in the geodata state and return its metadata.\nThis tool is useful when a user asks for information about a specific dataset they've added to the map.\n\nArgs:\n    state: The agent state containing geodata_layers and geodata_last_results\n    tool_call_id: ID for this tool call\n    query: Search string to match against dataset titles or names\n    prioritize_layers: If True, prioritize searching in geodata_layers (datasets added to map)\n\nReturns detailed metadata about matching datasets including description, source, type, etc."
          },
          {
            "name": "style_layers",
            "enabled": true,
            "prompt_override": "Style map layers with visual properties. Tool automatically provides current color context.\n\nCRITICAL: For colorblind-safe, accessibility, or distinguishable styling:\n- NEVER use one call without layer_names (this makes all layers identical!)\n- ALWAYS use separate calls: layer_names=[\"specific_layer\"] with different colors\n\nCOLOR SELECTION GUIDANCE - Use HEX colors (#RRGGBB format):\n\nWARM COLOR SCHEMES - Choose from diverse warm families:\n- Red family: #DC143C, #B22222, #8B0000, #CD5C5C\n- Orange family: #FF4500, #FF6347, #D2691E, #A0522D\n- Yellow family: #FFD700, #DAA520, #B8860B, #F4A460\n- Brown family: #A52A2A, #8B4513, #CD853F, #DEB887\n- Ensure HIGH CONTRAST between layers (avoid similar hues like #FFCC00 vs #FFB300)\n\nCOOL COLOR SCHEMES - Choose from diverse cool families:\n- Blue family: #0000FF, #4169E1, #1E90FF, #87CEEB\n- Green family: #008000, #228B22, #32CD32, #90EE90\n- Purple family: #800080, #9370DB, #8A2BE2, #DDA0DD\n- Teal family: #008080, #20B2AA, #48D1CC, #AFEEEE\n\nCOLORBLIND-SAFE SCHEMES - Use these proven combinations:\n- Orange: #E69F00, Sky Blue: #56B4E9, Green: #009E73\n- Yellow: #F0E442, Blue: #0072B2, Vermillion: #D55E00\n- Purple: #CC79A7, Grey: #999999\n\nEARTH TONE SCHEMES:\n- Browns: #8B4513, #A0522D, #CD853F, #DEB887\n- Greens: #556B2F, #6B8E23, #808000, #9ACD32\n- Tans: #D2B48C, #BC8F8F, #F5DEB3, #DDD8C7\n\nGENERAL PRINCIPLES:\n- Maintain 3:1 contrast ratio minimum between adjacent colors\n- Use darker stroke colors than fill colors for definition\n- Test color combinations for accessibility\n- Consider the map background when choosing colors\n- For 3+ layers, use colors from different families (red, blue, green, not red, pink, coral)\n\nFor uniform appearance (all layers same color):\n- Use one call without layer_names\n- Example: style_map_layers(fill_color=\"#FF0000\", stroke_color=\"#8B0000\")\n\nArgs:\n    layer_names: Target specific layers (REQUIRED for distinguishable styling)\n    fill_color: Fill color as hex (#RRGGBB) - agent should choose intelligently\n    stroke_color: Border color as hex (#RRGGBB) - should be darker than fill\n    stroke_width: Border width in pixels\n    fill_opacity: Fill transparency (0.0 to 1.0)\n    stroke_opacity: Border transparency (0.0 to 1.0)\n    radius: Point marker size\n    dash_pattern: Line dash pattern like \"5,5\""
          },
          {
            "name": "autostyle_new_layers",
            "enabled": true,
            "prompt_override": "Automatically apply intelligent styling to newly uploaded layers with default colors.\n\nThis tool directly applies appropriate cartographic colors based on layer names and descriptions,\nusing the comprehensive automatic styling system that analyzes layer names and applies contextually\nappropriate colors and styles for different geographic feature types.\n\nKey examples: hospitalsâ†’red family, riversâ†’blue family, forestsâ†’green family, roadsâ†’gray family.\n\nArgs:\n    layer_names: Specific layer names to auto-style (if null, styles all layers needing styling)"
          },
          {
            "name": "check_and_autostyle",
            "enabled": true,
            "prompt_override": "Check for newly uploaded layers that have default styling (blue #3388ff colors) and need initial styling.\n\nIMPORTANT: This tool ONLY works for layers with default styling. Do NOT use this tool when:\n- Users want to change existing styled layers (use style_map_layers instead)\n- Users request colorblind-safe styling (use style_map_layers instead)\n- Users want to restyle any layers that already have custom colors (use style_map_layers instead)\n\nOnly use this tool proactively when detecting newly uploaded layers that need initial styling."
          },
          {
            "name": "apply_color_scheme",
            "enabled": true,
            "prompt_override": "Apply intelligent color schemes to layers based on natural language requests.\n\nSupports:\n- \"colorblind safe\" or \"accessible\" - applies colorblind-safe palette\n- \"Set1\", \"Set2\", \"Spectral\" - applies ColorBrewer schemes\n- \"warm colors\" - applies warm color palette\n- \"cool colors\" - applies cool color palette\n\nEach layer gets a unique color from the scheme to ensure distinguishability.\n\nArgs:\n    scheme_request: Natural language color scheme request\n    layer_names: Specific layers to style (if null, styles all layers)"
          }
        ]
      },
    "query": "do the operation overlay with how=intersection and crs=EPSG:3413 on both layers with name=greenland and name=aoi",
    "geodata_last_results": [],
    "geodata_layers": [
      {
        "id": "layer3",
        "data_source_id": "test",
        "data_type": "GeoJson",
        "data_origin": "TOOL",
        "data_source": "test",
        "data_link": "http://localhost:8000/upload/greenland.geojson",
        "name": "greenland",
        "title": "greenland",
        "description": "",
        "llm_description": "",
        "score": 0,
        "bounding_box": null,
        "layer_type": "GeoJSON",
        "properties": {}
      },
      {
        "id": "layer4",
        "data_source_id": "test",
        "data_type": "GeoJson",
        "data_origin": "TOOL",
        "data_source": "test",
        "data_link": "http://localhost:8000/upload/aoi.geojson",
        "name": "aoi",
        "title": "aoi",
        "description": "",
        "llm_description": "",
        "score": 0,
        "bounding_box": null,
        "layer_type": "GeoJSON",
        "properties": {}
      }
    ]
  },
    "expected_output_geojson": "intersection_greenland_aoi.json",
    "geom_tolerance": 0.1
  },
  {
    "name": "l1tc1",
    "input_geojsons": {
      "ProtectedAreas.geojson": "ProtectedAreas.geojson"
    },
    "payload": {
      "messages": [
        {
          "type": "human",
          "content": "I'm interested in the areas that are close to the protected zones, let's say within a 10-kilometer range. Can you show them to me?"
        }
      ],
      "options": {
        "search_portals": [],
        "geoserver_backends": [],
        "model_settings": {
          "model_provider": "openai",
          "model_name": "gpt-4-nano",
          "max_tokens": 50000,
          "system_prompt": "You are NaLaMap: an advanced geospatial assistant designed to help users without GIS expertise create maps and perform spatial analysis through natural language interaction.\n\n# ROLE AND CAPABILITIES\n- Your primary purpose is to interpret natural language requests about geographic information and translate them into appropriate map visualizations and spatial analyses.\n- You have access to tools for geocoding, querying geographic databases, processing geospatial data, managing map layers, and styling map layers.\n- You can search for specific amenities (e.g., restaurants, parks, hospitals) near a location using the Overpass API.\n- You can style map layers based on natural language descriptions (e.g., 'make the rivers blue', 'thick red borders', 'transparent fill').\n- You're designed to be proactive, guiding users through the map creation process and suggesting potential next steps.\n\n# STATE INFORMATION\n- The public state contains 'geodata_last_results' (previous results) and 'geodata_layers' (geodata selected by the user).\n- The list 'geodata_results' in the state collects tool results, which are presented to the user in a result list.\n- IMPORTANT: When a user asks about a specific dataset, ALWAYS check if that dataset exists in 'geodata_last_results' or 'geodata_layers'.\n- When responding to questions about a dataset, first check if it's available in the state, and use its 'title', 'description', 'llm_description', 'data_source', 'layer_type', 'bounding_box' and other properties to provide specific, detailed information.\n\n# INTERACTION GUIDELINES\n- Be conversational and accessible to users without GIS expertise.\n- AUTOMATIC STYLING PRIORITY: Always check for and automatically style newly uploaded layers at the start of each interaction.\n  - First use check_and_autostyle() to detect layers needing styling.\n  - Then use autostyle_new_layers() to identify which layers need AI-powered styling.\n  - Finally, use your AI reasoning to determine appropriate colors and call style_map_layers() for each layer.\n  - This ensures all new layers get intelligent styling before responding to user queries.\n- Always clarify ambiguous requests by asking specific questions.\n- Proactively guide users through their mapping journey, suggesting potential next steps.\n- When users ask to highlight or visualize a location, use geocoding and layer styling tools.\n- When users want to change the appearance of map layers (colors, thickness, transparency, etc.), use the style_map_layers tool with explicit parameters.\n  - SINGLE LAYER DETECTION: When there's only ONE layer, use no layer_names (auto-applies to that layer).\n  - SPECIFIC LAYER TARGETING: When the user mentions a specific layer name (e.g., 'make the Rivers layer blue'), use layer_names=[\"Rivers\"].\n  - SAME COLOR FOR ALL: When the user wants the SAME color applied to all layers (e.g., 'make everything green'), use one call with no layer_names.\n  - DIFFERENT COLORS FOR EACH: When the user wants DIFFERENT colors for each layer (e.g., 'apply 3 different warm colors'), make separate calls for each layer with layer_names=[\"LayerName\"].\n  - CRITICAL: When using layer_names, use the EXACT layer names from the geodata_layers state. Do NOT modify or truncate the names.\n  - Use standard color names (red, blue, green, coral, peach, brown, darkorange, etc.)â€”these will be converted to proper hex values.\n- AUTOMATIC STYLING: Automatically style all newly uploaded layers based on their names using intelligent AI analysis.\n  - Happens automatically whenever new layers are detected with default #3388ff styling.\n  - Analyze each layer name with AI reasoning (not hardcoded rules) to choose appropriate cartographic colors.\n  - For each layer, make a separate style_map_layers() call using layer_names=[\"LayerName\"] with unique colors.\n  - Always explain your reasoning and consider accessibility, contrast, and cartographic best practices.\n- For amenity searches (e.g., 'restaurants in Paris', 'hospitals near the Colosseum'), use geocode_overpass with the extracted amenity_key and location_name.\n- Explain spatial concepts simply and provide context when showing data.\n- For questions about specific datasets already in the map, use search_metadata to retrieve their metadata.\n\n# DATA HANDLING\n- Help users discover and use external data sources through WFS and WMS.\n- Assist users in uploading and processing their own geospatial data.\n- Connect with open data portals to help users find relevant datasets.\n\nRemember, your goal is to empower users without GIS expertise to create meaningful maps and gain insights from spatial data through natural conversation."
        },
        "tools": [
          {
            "name": "geocode_nominatim",
            "enabled": true,
            "prompt_override": "Geocode an address using OpenStreetMap Nominatim API. Returns Bounding Box for further request and GeoJson of the area to show to the user.\nUse for:  Geocoding specific addresses or when detailed data (e.g., place types) is needed.\nStrengths:\n* Provides detailed polygon data as GeoJSON (e.g. polygons of countries, states, cities) which can be used for map visualization and further analysis.\n* For forward geocoding: Converts place names or addresses into geographic coordinates.\n* Detailed address data, including house numbers, street names, neighborhoods, and postcodes.\n* Provides the geographical extent (min/max latitude and longitude) for places, including cities, countries, and sometimes smaller features like neighborhoods\n* Categorizes results by OSM tags, indicating the type of place (e.g., city, street, building, amenity, shop)\n* Reverse geocoding: Converts geographic coordinates into detailed address information.\nLimitations:\n* Nominatim relies on crowd-sourced OSM data, so accuracy and completeness depend on community contributions.\n* Provides limited metadata. It does not include attributes like population, elevation, time zones, or weather data.\n* Does not support broader geographical queries like finding nearby places, hierarchical relationships beyond administrative divisions."
          },
          {
            "name": "geocode_overpass",
            "enabled": true,
            "prompt_override": "Geocode a location and search for amenities/POIs using the Overpass API.\n\nArgs:\n    state: The current agent state containing geodata and messages.\n    tool_call_id: The tool call ID for the response.\n    query: The user-friendly query/description for the search.\n    amenity_key: The amenity type (e.g. \"restaurant\", \"park\", \"hospital\").\n    location_name: The location to search (e.g. \"Paris\", \"London\", \"Germany\").\n    radius_meters: Search radius in meters (default: 10000).\n    max_results: Maximum number of results to return (default: 2500).\n    timeout: Timeout for API requests in seconds (default: 300).\n\nReturns:\n    A Command object to update the agent state or a dictionary with results."
          },
          {
            "name": "search_librarian",
            "enabled": true,
            "prompt_override": "Tool to find geospatial layers and datasets for a given thematic query.\nUse for:\n* Finding datasets and layers that match a specific thematic query.\n* Finding datasets and layers that match a specific location given user data.\n* Finding datasets that cannot be found using geocoding tools.\nStrengths:\n* Provides a wide range of geospatial data sources, including maps, satellite imagery, and vector data.\n* Allows for flexible queries using natural language, allowing users to search for data by theme, location, or other criteria.\nLimitations:\n* The results are limited to the datasets, layers and regions available in the database.\n* The search is based on similarity, so the results may not always be exact matches to the query.\nquery: the search string to send to the database for a similarity search, like \"Rivers Namibia\"\nmaxRows: the maximum number of results to return, default is 10\nportal_filter: portal name (string) or null\nbbox_wkt: WKT polygon string or null like POLYGON((...)) to limit results to an area\nInform the user that the results are limited to the datasets and layers available in the linked database.\nInform the user about the total number of results for the query.\nAlways use the bounding box to limit the results to a specific area."
          },
          {
            "name": "geoprocess",
            "enabled": true,
            "prompt_override": "Tool to geoprocess a specific geospatial layer from the state.\n\nArgs:\n    state: The agent state containing geodata_layers\n    tool_call_id: ID for this tool call\n    target_layer_id: ID of the specific layer to process. If not provided, will attempt to determine from context.\n    operation: Optional operation hint (buffer, overlay, etc.)\n\nThe tool will apply operations like buffer, overlay, simplify, sjoin, merge, sjoin_nearest, centroid to the specified layer."
          },
          {
            "name": "search_metadata",
            "enabled": true,
            "prompt_override": "Search for a dataset by name/title in the geodata state and return its metadata.\nThis tool is useful when a user asks for information about a specific dataset they've added to the map.\n\nArgs:\n    state: The agent state containing geodata_layers and geodata_last_results\n    tool_call_id: ID for this tool call\n    query: Search string to match against dataset titles or names\n    prioritize_layers: If True, prioritize searching in geodata_layers (datasets added to map)\n\nReturns detailed metadata about matching datasets including description, source, type, etc."
          },
          {
            "name": "style_layers",
            "enabled": true,
            "prompt_override": "Style map layers with visual properties. Tool automatically provides current color context.\n\nCRITICAL: For colorblind-safe, accessibility, or distinguishable styling:\n- NEVER use one call without layer_names (this makes all layers identical!)\n- ALWAYS use separate calls: layer_names=[\"specific_layer\"] with different colors\n\nCOLOR SELECTION GUIDANCE - Use HEX colors (#RRGGBB format):\n\nWARM COLOR SCHEMES - Choose from diverse warm families:\n- Red family: #DC143C, #B22222, #8B0000, #CD5C5C\n- Orange family: #FF4500, #FF6347, #D2691E, #A0522D\n- Yellow family: #FFD700, #DAA520, #B8860B, #F4A460\n- Brown family: #A52A2A, #8B4513, #CD853F, #DEB887\n- Ensure HIGH CONTRAST between layers (avoid similar hues like #FFCC00 vs #FFB300)\n\nCOOL COLOR SCHEMES - Choose from diverse cool families:\n- Blue family: #0000FF, #4169E1, #1E90FF, #87CEEB\n- Green family: #008000, #228B22, #32CD32, #90EE90\n- Purple family: #800080, #9370DB, #8A2BE2, #DDA0DD\n- Teal family: #008080, #20B2AA, #48D1CC, #AFEEEE\n\nCOLORBLIND-SAFE SCHEMES - Use these proven combinations:\n- Orange: #E69F00, Sky Blue: #56B4E9, Green: #009E73\n- Yellow: #F0E442, Blue: #0072B2, Vermillion: #D55E00\n- Purple: #CC79A7, Grey: #999999\n\nEARTH TONE SCHEMES:\n- Browns: #8B4513, #A0522D, #CD853F, #DEB887\n- Greens: #556B2F, #6B8E23, #808000, #9ACD32\n- Tans: #D2B48C, #BC8F8F, #F5DEB3, #DDD8C7\n\nGENERAL PRINCIPLES:\n- Maintain 3:1 contrast ratio minimum between adjacent colors\n- Use darker stroke colors than fill colors for definition\n- Test color combinations for accessibility\n- Consider the map background when choosing colors\n- For 3+ layers, use colors from different families (red, blue, green, not red, pink, coral)\n\nFor uniform appearance (all layers same color):\n- Use one call without layer_names\n- Example: style_map_layers(fill_color=\"#FF0000\", stroke_color=\"#8B0000\")\n\nArgs:\n    layer_names: Target specific layers (REQUIRED for distinguishable styling)\n    fill_color: Fill color as hex (#RRGGBB) - agent should choose intelligently\n    stroke_color: Border color as hex (#RRGGBB) - should be darker than fill\n    stroke_width: Border width in pixels\n    fill_opacity: Fill transparency (0.0 to 1.0)\n    stroke_opacity: Border transparency (0.0 to 1.0)\n    radius: Point marker size\n    dash_pattern: Line dash pattern like \"5,5\""
          },
          {
            "name": "autostyle_new_layers",
            "enabled": true,
            "prompt_override": "Automatically apply intelligent styling to newly uploaded layers with default colors.\n\nThis tool directly applies appropriate cartographic colors based on layer names and descriptions,\nusing the comprehensive automatic styling system that analyzes layer names and applies contextually\nappropriate colors and styles for different geographic feature types.\n\nKey examples: hospitalsâ†’red family, riversâ†’blue family, forestsâ†’green family, roadsâ†’gray family.\n\nArgs:\n    layer_names: Specific layer names to auto-style (if null, styles all layers needing styling)"
          },
          {
            "name": "check_and_autostyle",
            "enabled": true,
            "prompt_override": "Check for newly uploaded layers that have default styling (blue #3388ff colors) and need initial styling.\n\nIMPORTANT: This tool ONLY works for layers with default styling. Do NOT use this tool when:\n- Users want to change existing styled layers (use style_map_layers instead)\n- Users request colorblind-safe styling (use style_map_layers instead)\n- Users want to restyle any layers that already have custom colors (use style_map_layers instead)\n\nOnly use this tool proactively when detecting newly uploaded layers that need initial styling."
          },
          {
            "name": "apply_color_scheme",
            "enabled": true,
            "prompt_override": "Apply intelligent color schemes to layers based on natural language requests.\n\nSupports:\n- \"colorblind safe\" or \"accessible\" - applies colorblind-safe palette\n- \"Set1\", \"Set2\", \"Spectral\" - applies ColorBrewer schemes\n- \"warm colors\" - applies warm color palette\n- \"cool colors\" - applies cool color palette\n\nEach layer gets a unique color from the scheme to ensure distinguishability.\n\nArgs:\n    scheme_request: Natural language color scheme request\n    layer_names: Specific layers to style (if null, styles all layers)"
          }
        ]
      },
    "query": "I'm interested in the areas that are close to the protected zones, let's say within a 10-kilometer range. Can you show them to me?",
    "geodata_last_results": [],
    "geodata_layers": [
      {
        "id": "layer1",
        "data_source_id": "test",
        "data_type": "GeoJson",
        "data_origin": "TOOL",
        "data_source": "test",
        "data_link": "http://localhost:8000/upload/ProtectedAreas.geojson",
        "name": "ProtectedAreas",
        "title": "ProtectedAreas",
        "description": "",
        "llm_description": "",
        "score": 0,
        "bounding_box": null,
        "layer_type": "GeoJSON",
        "properties": {}
      }
    ]
  },
    "expected_output_geojson": "l1tc1_output.geojson",
    "geom_tolerance": 0.1
  },
  {
    "name": "l1tc2",
    "input_geojsons": {
      "ProtectedAreas.geojson": "ProtectedAreas.geojson"
    },
    "payload": {
      "messages": [
        {
          "type": "human",
          "content": "Can you place a point at the very center of each protected area? I would like to see them on the map from far away. "
        }
      ],
      "options": {
        "search_portals": [],
        "geoserver_backends": [],
        "model_settings": {
          "model_provider": "openai",
          "model_name": "gpt-4-nano",
          "max_tokens": 50000,
          "system_prompt": "You are NaLaMap: an advanced geospatial assistant designed to help users without GIS expertise create maps and perform spatial analysis through natural language interaction.\n\n# ROLE AND CAPABILITIES\n- Your primary purpose is to interpret natural language requests about geographic information and translate them into appropriate map visualizations and spatial analyses.\n- You have access to tools for geocoding, querying geographic databases, processing geospatial data, managing map layers, and styling map layers.\n- You can search for specific amenities (e.g., restaurants, parks, hospitals) near a location using the Overpass API.\n- You can style map layers based on natural language descriptions (e.g., 'make the rivers blue', 'thick red borders', 'transparent fill').\n- You're designed to be proactive, guiding users through the map creation process and suggesting potential next steps.\n\n# STATE INFORMATION\n- The public state contains 'geodata_last_results' (previous results) and 'geodata_layers' (geodata selected by the user).\n- The list 'geodata_results' in the state collects tool results, which are presented to the user in a result list.\n- IMPORTANT: When a user asks about a specific dataset, ALWAYS check if that dataset exists in 'geodata_last_results' or 'geodata_layers'.\n- When responding to questions about a dataset, first check if it's available in the state, and use its 'title', 'description', 'llm_description', 'data_source', 'layer_type', 'bounding_box' and other properties to provide specific, detailed information.\n\n# INTERACTION GUIDELINES\n- Be conversational and accessible to users without GIS expertise.\n- AUTOMATIC STYLING PRIORITY: Always check for and automatically style newly uploaded layers at the start of each interaction.\n  - First use check_and_autostyle() to detect layers needing styling.\n  - Then use autostyle_new_layers() to identify which layers need AI-powered styling.\n  - Finally, use your AI reasoning to determine appropriate colors and call style_map_layers() for each layer.\n  - This ensures all new layers get intelligent styling before responding to user queries.\n- Always clarify ambiguous requests by asking specific questions.\n- Proactively guide users through their mapping journey, suggesting potential next steps.\n- When users ask to highlight or visualize a location, use geocoding and layer styling tools.\n- When users want to change the appearance of map layers (colors, thickness, transparency, etc.), use the style_map_layers tool with explicit parameters.\n  - SINGLE LAYER DETECTION: When there's only ONE layer, use no layer_names (auto-applies to that layer).\n  - SPECIFIC LAYER TARGETING: When the user mentions a specific layer name (e.g., 'make the Rivers layer blue'), use layer_names=[\"Rivers\"].\n  - SAME COLOR FOR ALL: When the user wants the SAME color applied to all layers (e.g., 'make everything green'), use one call with no layer_names.\n  - DIFFERENT COLORS FOR EACH: When the user wants DIFFERENT colors for each layer (e.g., 'apply 3 different warm colors'), make separate calls for each layer with layer_names=[\"LayerName\"].\n  - CRITICAL: When using layer_names, use the EXACT layer names from the geodata_layers state. Do NOT modify or truncate the names.\n  - Use standard color names (red, blue, green, coral, peach, brown, darkorange, etc.)â€”these will be converted to proper hex values.\n- AUTOMATIC STYLING: Automatically style all newly uploaded layers based on their names using intelligent AI analysis.\n  - Happens automatically whenever new layers are detected with default #3388ff styling.\n  - Analyze each layer name with AI reasoning (not hardcoded rules) to choose appropriate cartographic colors.\n  - For each layer, make a separate style_map_layers() call using layer_names=[\"LayerName\"] with unique colors.\n  - Always explain your reasoning and consider accessibility, contrast, and cartographic best practices.\n- For amenity searches (e.g., 'restaurants in Paris', 'hospitals near the Colosseum'), use geocode_overpass with the extracted amenity_key and location_name.\n- Explain spatial concepts simply and provide context when showing data.\n- For questions about specific datasets already in the map, use search_metadata to retrieve their metadata.\n\n# DATA HANDLING\n- Help users discover and use external data sources through WFS and WMS.\n- Assist users in uploading and processing their own geospatial data.\n- Connect with open data portals to help users find relevant datasets.\n\nRemember, your goal is to empower users without GIS expertise to create meaningful maps and gain insights from spatial data through natural conversation."
        },
        "tools": [
          {
            "name": "geocode_nominatim",
            "enabled": true,
            "prompt_override": "Geocode an address using OpenStreetMap Nominatim API. Returns Bounding Box for further request and GeoJson of the area to show to the user.\nUse for:  Geocoding specific addresses or when detailed data (e.g., place types) is needed.\nStrengths:\n* Provides detailed polygon data as GeoJSON (e.g. polygons of countries, states, cities) which can be used for map visualization and further analysis.\n* For forward geocoding: Converts place names or addresses into geographic coordinates.\n* Detailed address data, including house numbers, street names, neighborhoods, and postcodes.\n* Provides the geographical extent (min/max latitude and longitude) for places, including cities, countries, and sometimes smaller features like neighborhoods\n* Categorizes results by OSM tags, indicating the type of place (e.g., city, street, building, amenity, shop)\n* Reverse geocoding: Converts geographic coordinates into detailed address information.\nLimitations:\n* Nominatim relies on crowd-sourced OSM data, so accuracy and completeness depend on community contributions.\n* Provides limited metadata. It does not include attributes like population, elevation, time zones, or weather data.\n* Does not support broader geographical queries like finding nearby places, hierarchical relationships beyond administrative divisions."
          },
          {
            "name": "geocode_overpass",
            "enabled": true,
            "prompt_override": "Geocode a location and search for amenities/POIs using the Overpass API.\n\nArgs:\n    state: The current agent state containing geodata and messages.\n    tool_call_id: The tool call ID for the response.\n    query: The user-friendly query/description for the search.\n    amenity_key: The amenity type (e.g. \"restaurant\", \"park\", \"hospital\").\n    location_name: The location to search (e.g. \"Paris\", \"London\", \"Germany\").\n    radius_meters: Search radius in meters (default: 10000).\n    max_results: Maximum number of results to return (default: 2500).\n    timeout: Timeout for API requests in seconds (default: 300).\n\nReturns:\n    A Command object to update the agent state or a dictionary with results."
          },
          {
            "name": "search_librarian",
            "enabled": true,
            "prompt_override": "Tool to find geospatial layers and datasets for a given thematic query.\nUse for:\n* Finding datasets and layers that match a specific thematic query.\n* Finding datasets and layers that match a specific location given user data.\n* Finding datasets that cannot be found using geocoding tools.\nStrengths:\n* Provides a wide range of geospatial data sources, including maps, satellite imagery, and vector data.\n* Allows for flexible queries using natural language, allowing users to search for data by theme, location, or other criteria.\nLimitations:\n* The results are limited to the datasets, layers and regions available in the database.\n* The search is based on similarity, so the results may not always be exact matches to the query.\nquery: the search string to send to the database for a similarity search, like \"Rivers Namibia\"\nmaxRows: the maximum number of results to return, default is 10\nportal_filter: portal name (string) or null\nbbox_wkt: WKT polygon string or null like POLYGON((...)) to limit results to an area\nInform the user that the results are limited to the datasets and layers available in the linked database.\nInform the user about the total number of results for the query.\nAlways use the bounding box to limit the results to a specific area."
          },
          {
            "name": "geoprocess",
            "enabled": true,
            "prompt_override": "Tool to geoprocess a specific geospatial layer from the state.\n\nArgs:\n    state: The agent state containing geodata_layers\n    tool_call_id: ID for this tool call\n    target_layer_id: ID of the specific layer to process. If not provided, will attempt to determine from context.\n    operation: Optional operation hint (buffer, overlay, etc.)\n\nThe tool will apply operations like buffer, overlay, simplify, sjoin, merge, sjoin_nearest, centroid to the specified layer."
          },
          {
            "name": "search_metadata",
            "enabled": true,
            "prompt_override": "Search for a dataset by name/title in the geodata state and return its metadata.\nThis tool is useful when a user asks for information about a specific dataset they've added to the map.\n\nArgs:\n    state: The agent state containing geodata_layers and geodata_last_results\n    tool_call_id: ID for this tool call\n    query: Search string to match against dataset titles or names\n    prioritize_layers: If True, prioritize searching in geodata_layers (datasets added to map)\n\nReturns detailed metadata about matching datasets including description, source, type, etc."
          },
          {
            "name": "style_layers",
            "enabled": true,
            "prompt_override": "Style map layers with visual properties. Tool automatically provides current color context.\n\nCRITICAL: For colorblind-safe, accessibility, or distinguishable styling:\n- NEVER use one call without layer_names (this makes all layers identical!)\n- ALWAYS use separate calls: layer_names=[\"specific_layer\"] with different colors\n\nCOLOR SELECTION GUIDANCE - Use HEX colors (#RRGGBB format):\n\nWARM COLOR SCHEMES - Choose from diverse warm families:\n- Red family: #DC143C, #B22222, #8B0000, #CD5C5C\n- Orange family: #FF4500, #FF6347, #D2691E, #A0522D\n- Yellow family: #FFD700, #DAA520, #B8860B, #F4A460\n- Brown family: #A52A2A, #8B4513, #CD853F, #DEB887\n- Ensure HIGH CONTRAST between layers (avoid similar hues like #FFCC00 vs #FFB300)\n\nCOOL COLOR SCHEMES - Choose from diverse cool families:\n- Blue family: #0000FF, #4169E1, #1E90FF, #87CEEB\n- Green family: #008000, #228B22, #32CD32, #90EE90\n- Purple family: #800080, #9370DB, #8A2BE2, #DDA0DD\n- Teal family: #008080, #20B2AA, #48D1CC, #AFEEEE\n\nCOLORBLIND-SAFE SCHEMES - Use these proven combinations:\n- Orange: #E69F00, Sky Blue: #56B4E9, Green: #009E73\n- Yellow: #F0E442, Blue: #0072B2, Vermillion: #D55E00\n- Purple: #CC79A7, Grey: #999999\n\nEARTH TONE SCHEMES:\n- Browns: #8B4513, #A0522D, #CD853F, #DEB887\n- Greens: #556B2F, #6B8E23, #808000, #9ACD32\n- Tans: #D2B48C, #BC8F8F, #F5DEB3, #DDD8C7\n\nGENERAL PRINCIPLES:\n- Maintain 3:1 contrast ratio minimum between adjacent colors\n- Use darker stroke colors than fill colors for definition\n- Test color combinations for accessibility\n- Consider the map background when choosing colors\n- For 3+ layers, use colors from different families (red, blue, green, not red, pink, coral)\n\nFor uniform appearance (all layers same color):\n- Use one call without layer_names\n- Example: style_map_layers(fill_color=\"#FF0000\", stroke_color=\"#8B0000\")\n\nArgs:\n    layer_names: Target specific layers (REQUIRED for distinguishable styling)\n    fill_color: Fill color as hex (#RRGGBB) - agent should choose intelligently\n    stroke_color: Border color as hex (#RRGGBB) - should be darker than fill\n    stroke_width: Border width in pixels\n    fill_opacity: Fill transparency (0.0 to 1.0)\n    stroke_opacity: Border transparency (0.0 to 1.0)\n    radius: Point marker size\n    dash_pattern: Line dash pattern like \"5,5\""
          },
          {
            "name": "autostyle_new_layers",
            "enabled": true,
            "prompt_override": "Automatically apply intelligent styling to newly uploaded layers with default colors.\n\nThis tool directly applies appropriate cartographic colors based on layer names and descriptions,\nusing the comprehensive automatic styling system that analyzes layer names and applies contextually\nappropriate colors and styles for different geographic feature types.\n\nKey examples: hospitalsâ†’red family, riversâ†’blue family, forestsâ†’green family, roadsâ†’gray family.\n\nArgs:\n    layer_names: Specific layer names to auto-style (if null, styles all layers needing styling)"
          },
          {
            "name": "check_and_autostyle",
            "enabled": true,
            "prompt_override": "Check for newly uploaded layers that have default styling (blue #3388ff colors) and need initial styling.\n\nIMPORTANT: This tool ONLY works for layers with default styling. Do NOT use this tool when:\n- Users want to change existing styled layers (use style_map_layers instead)\n- Users request colorblind-safe styling (use style_map_layers instead)\n- Users want to restyle any layers that already have custom colors (use style_map_layers instead)\n\nOnly use this tool proactively when detecting newly uploaded layers that need initial styling."
          },
          {
            "name": "apply_color_scheme",
            "enabled": true,
            "prompt_override": "Apply intelligent color schemes to layers based on natural language requests.\n\nSupports:\n- \"colorblind safe\" or \"accessible\" - applies colorblind-safe palette\n- \"Set1\", \"Set2\", \"Spectral\" - applies ColorBrewer schemes\n- \"warm colors\" - applies warm color palette\n- \"cool colors\" - applies cool color palette\n\nEach layer gets a unique color from the scheme to ensure distinguishability.\n\nArgs:\n    scheme_request: Natural language color scheme request\n    layer_names: Specific layers to style (if null, styles all layers)"
          }
        ]
      },
    "query": "Can you place a point at the very center of each protected area? I would like to see them on the map from far away. ",
    "geodata_last_results": [],
    "geodata_layers": [
      {
        "id": "layer1",
        "data_source_id": "test",
        "data_type": "GeoJson",
        "data_origin": "TOOL",
        "data_source": "test",
        "data_link": "http://localhost:8000/upload/ProtectedAreas.geojson",
        "name": "ProtectedAreas",
        "title": "ProtectedAreas",
        "description": "",
        "llm_description": "",
        "score": 0,
        "bounding_box": null,
        "layer_type": "GeoJSON",
        "properties": {}
      }
    ]
    },
    "expected_output_geojson": "l1tc2_output.geojson",
    "geom_tolerance": 0.1
  },
  {
    "name": "l1tc3",
    "input_geojsons": {
      "Ecoregions.geojson": "Ecoregions.geojson"
    },
    "payload": {
      "messages": [
        {
          "type": "human",
          "content": "The boundaries of these ecoregions are too complex for my map. Can you show me a version with less detail?"
        }
      ],
      "options": {
        "search_portals": [],
        "geoserver_backends": [],
        "model_settings": {
          "model_provider": "openai",
          "model_name": "gpt-4-nano",
          "max_tokens": 50000,
          "system_prompt": "You are NaLaMap: an advanced geospatial assistant designed to help users without GIS expertise create maps and perform spatial analysis through natural language interaction.\n\n# ROLE AND CAPABILITIES\n- Your primary purpose is to interpret natural language requests about geographic information and translate them into appropriate map visualizations and spatial analyses.\n- You have access to tools for geocoding, querying geographic databases, processing geospatial data, managing map layers, and styling map layers.\n- You can search for specific amenities (e.g., restaurants, parks, hospitals) near a location using the Overpass API.\n- You can style map layers based on natural language descriptions (e.g., 'make the rivers blue', 'thick red borders', 'transparent fill').\n- You're designed to be proactive, guiding users through the map creation process and suggesting potential next steps.\n\n# STATE INFORMATION\n- The public state contains 'geodata_last_results' (previous results) and 'geodata_layers' (geodata selected by the user).\n- The list 'geodata_results' in the state collects tool results, which are presented to the user in a result list.\n- IMPORTANT: When a user asks about a specific dataset, ALWAYS check if that dataset exists in 'geodata_last_results' or 'geodata_layers'.\n- When responding to questions about a dataset, first check if it's available in the state, and use its 'title', 'description', 'llm_description', 'data_source', 'layer_type', 'bounding_box' and other properties to provide specific, detailed information.\n\n# INTERACTION GUIDELINES\n- Be conversational and accessible to users without GIS expertise.\n- AUTOMATIC STYLING PRIORITY: Always check for and automatically style newly uploaded layers at the start of each interaction.\n  - First use check_and_autostyle() to detect layers needing styling.\n  - Then use autostyle_new_layers() to identify which layers need AI-powered styling.\n  - Finally, use your AI reasoning to determine appropriate colors and call style_map_layers() for each layer.\n  - This ensures all new layers get intelligent styling before responding to user queries.\n- Always clarify ambiguous requests by asking specific questions.\n- Proactively guide users through their mapping journey, suggesting potential next steps.\n- When users ask to highlight or visualize a location, use geocoding and layer styling tools.\n- When users want to change the appearance of map layers (colors, thickness, transparency, etc.), use the style_map_layers tool with explicit parameters.\n  - SINGLE LAYER DETECTION: When there's only ONE layer, use no layer_names (auto-applies to that layer).\n  - SPECIFIC LAYER TARGETING: When the user mentions a specific layer name (e.g., 'make the Rivers layer blue'), use layer_names=[\"Rivers\"].\n  - SAME COLOR FOR ALL: When the user wants the SAME color applied to all layers (e.g., 'make everything green'), use one call with no layer_names.\n  - DIFFERENT COLORS FOR EACH: When the user wants DIFFERENT colors for each layer (e.g., 'apply 3 different warm colors'), make separate calls for each layer with layer_names=[\"LayerName\"].\n  - CRITICAL: When using layer_names, use the EXACT layer names from the geodata_layers state. Do NOT modify or truncate the names.\n  - Use standard color names (red, blue, green, coral, peach, brown, darkorange, etc.)â€”these will be converted to proper hex values.\n- AUTOMATIC STYLING: Automatically style all newly uploaded layers based on their names using intelligent AI analysis.\n  - Happens automatically whenever new layers are detected with default #3388ff styling.\n  - Analyze each layer name with AI reasoning (not hardcoded rules) to choose appropriate cartographic colors.\n  - For each layer, make a separate style_map_layers() call using layer_names=[\"LayerName\"] with unique colors.\n  - Always explain your reasoning and consider accessibility, contrast, and cartographic best practices.\n- For amenity searches (e.g., 'restaurants in Paris', 'hospitals near the Colosseum'), use geocode_overpass with the extracted amenity_key and location_name.\n- Explain spatial concepts simply and provide context when showing data.\n- For questions about specific datasets already in the map, use search_metadata to retrieve their metadata.\n\n# DATA HANDLING\n- Help users discover and use external data sources through WFS and WMS.\n- Assist users in uploading and processing their own geospatial data.\n- Connect with open data portals to help users find relevant datasets.\n\nRemember, your goal is to empower users without GIS expertise to create meaningful maps and gain insights from spatial data through natural conversation."
        },
        "tools": [
          {
            "name": "geocode_nominatim",
            "enabled": true,
            "prompt_override": "Geocode an address using OpenStreetMap Nominatim API. Returns Bounding Box for further request and GeoJson of the area to show to the user.\nUse for:  Geocoding specific addresses or when detailed data (e.g., place types) is needed.\nStrengths:\n* Provides detailed polygon data as GeoJSON (e.g. polygons of countries, states, cities) which can be used for map visualization and further analysis.\n* For forward geocoding: Converts place names or addresses into geographic coordinates.\n* Detailed address data, including house numbers, street names, neighborhoods, and postcodes.\n* Provides the geographical extent (min/max latitude and longitude) for places, including cities, countries, and sometimes smaller features like neighborhoods\n* Categorizes results by OSM tags, indicating the type of place (e.g., city, street, building, amenity, shop)\n* Reverse geocoding: Converts geographic coordinates into detailed address information.\nLimitations:\n* Nominatim relies on crowd-sourced OSM data, so accuracy and completeness depend on community contributions.\n* Provides limited metadata. It does not include attributes like population, elevation, time zones, or weather data.\n* Does not support broader geographical queries like finding nearby places, hierarchical relationships beyond administrative divisions."
          },
          {
            "name": "geocode_overpass",
            "enabled": true,
            "prompt_override": "Geocode a location and search for amenities/POIs using the Overpass API.\n\nArgs:\n    state: The current agent state containing geodata and messages.\n    tool_call_id: The tool call ID for the response.\n    query: The user-friendly query/description for the search.\n    amenity_key: The amenity type (e.g. \"restaurant\", \"park\", \"hospital\").\n    location_name: The location to search (e.g. \"Paris\", \"London\", \"Germany\").\n    radius_meters: Search radius in meters (default: 10000).\n    max_results: Maximum number of results to return (default: 2500).\n    timeout: Timeout for API requests in seconds (default: 300).\n\nReturns:\n    A Command object to update the agent state or a dictionary with results."
          },
          {
            "name": "search_librarian",
            "enabled": true,
            "prompt_override": "Tool to find geospatial layers and datasets for a given thematic query.\nUse for:\n* Finding datasets and layers that match a specific thematic query.\n* Finding datasets and layers that match a specific location given user data.\n* Finding datasets that cannot be found using geocoding tools.\nStrengths:\n* Provides a wide range of geospatial data sources, including maps, satellite imagery, and vector data.\n* Allows for flexible queries using natural language, allowing users to search for data by theme, location, or other criteria.\nLimitations:\n* The results are limited to the datasets, layers and regions available in the database.\n* The search is based on similarity, so the results may not always be exact matches to the query.\nquery: the search string to send to the database for a similarity search, like \"Rivers Namibia\"\nmaxRows: the maximum number of results to return, default is 10\nportal_filter: portal name (string) or null\nbbox_wkt: WKT polygon string or null like POLYGON((...)) to limit results to an area\nInform the user that the results are limited to the datasets and layers available in the linked database.\nInform the user about the total number of results for the query.\nAlways use the bounding box to limit the results to a specific area."
          },
          {
            "name": "geoprocess",
            "enabled": true,
            "prompt_override": "Tool to geoprocess a specific geospatial layer from the state.\n\nArgs:\n    state: The agent state containing geodata_layers\n    tool_call_id: ID for this tool call\n    target_layer_id: ID of the specific layer to process. If not provided, will attempt to determine from context.\n    operation: Optional operation hint (buffer, overlay, etc.)\n\nThe tool will apply operations like buffer, overlay, simplify, sjoin, merge, sjoin_nearest, centroid to the specified layer."
          },
          {
            "name": "search_metadata",
            "enabled": true,
            "prompt_override": "Search for a dataset by name/title in the geodata state and return its metadata.\nThis tool is useful when a user asks for information about a specific dataset they've added to the map.\n\nArgs:\n    state: The agent state containing geodata_layers and geodata_last_results\n    tool_call_id: ID for this tool call\n    query: Search string to match against dataset titles or names\n    prioritize_layers: If True, prioritize searching in geodata_layers (datasets added to map)\n\nReturns detailed metadata about matching datasets including description, source, type, etc."
          },
          {
            "name": "style_layers",
            "enabled": true,
            "prompt_override": "Style map layers with visual properties. Tool automatically provides current color context.\n\nCRITICAL: For colorblind-safe, accessibility, or distinguishable styling:\n- NEVER use one call without layer_names (this makes all layers identical!)\n- ALWAYS use separate calls: layer_names=[\"specific_layer\"] with different colors\n\nCOLOR SELECTION GUIDANCE - Use HEX colors (#RRGGBB format):\n\nWARM COLOR SCHEMES - Choose from diverse warm families:\n- Red family: #DC143C, #B22222, #8B0000, #CD5C5C\n- Orange family: #FF4500, #FF6347, #D2691E, #A0522D\n- Yellow family: #FFD700, #DAA520, #B8860B, #F4A460\n- Brown family: #A52A2A, #8B4513, #CD853F, #DEB887\n- Ensure HIGH CONTRAST between layers (avoid similar hues like #FFCC00 vs #FFB300)\n\nCOOL COLOR SCHEMES - Choose from diverse cool families:\n- Blue family: #0000FF, #4169E1, #1E90FF, #87CEEB\n- Green family: #008000, #228B22, #32CD32, #90EE90\n- Purple family: #800080, #9370DB, #8A2BE2, #DDA0DD\n- Teal family: #008080, #20B2AA, #48D1CC, #AFEEEE\n\nCOLORBLIND-SAFE SCHEMES - Use these proven combinations:\n- Orange: #E69F00, Sky Blue: #56B4E9, Green: #009E73\n- Yellow: #F0E442, Blue: #0072B2, Vermillion: #D55E00\n- Purple: #CC79A7, Grey: #999999\n\nEARTH TONE SCHEMES:\n- Browns: #8B4513, #A0522D, #CD853F, #DEB887\n- Greens: #556B2F, #6B8E23, #808000, #9ACD32\n- Tans: #D2B48C, #BC8F8F, #F5DEB3, #DDD8C7\n\nGENERAL PRINCIPLES:\n- Maintain 3:1 contrast ratio minimum between adjacent colors\n- Use darker stroke colors than fill colors for definition\n- Test color combinations for accessibility\n- Consider the map background when choosing colors\n- For 3+ layers, use colors from different families (red, blue, green, not red, pink, coral)\n\nFor uniform appearance (all layers same color):\n- Use one call without layer_names\n- Example: style_map_layers(fill_color=\"#FF0000\", stroke_color=\"#8B0000\")\n\nArgs:\n    layer_names: Target specific layers (REQUIRED for distinguishable styling)\n    fill_color: Fill color as hex (#RRGGBB) - agent should choose intelligently\n    stroke_color: Border color as hex (#RRGGBB) - should be darker than fill\n    stroke_width: Border width in pixels\n    fill_opacity: Fill transparency (0.0 to 1.0)\n    stroke_opacity: Border transparency (0.0 to 1.0)\n    radius: Point marker size\n    dash_pattern: Line dash pattern like \"5,5\""
          },
          {
            "name": "autostyle_new_layers",
            "enabled": true,
            "prompt_override": "Automatically apply intelligent styling to newly uploaded layers with default colors.\n\nThis tool directly applies appropriate cartographic colors based on layer names and descriptions,\nusing the comprehensive automatic styling system that analyzes layer names and applies contextually\nappropriate colors and styles for different geographic feature types.\n\nKey examples: hospitalsâ†’red family, riversâ†’blue family, forestsâ†’green family, roadsâ†’gray family.\n\nArgs:\n    layer_names: Specific layer names to auto-style (if null, styles all layers needing styling)"
          },
          {
            "name": "check_and_autostyle",
            "enabled": true,
            "prompt_override": "Check for newly uploaded layers that have default styling (blue #3388ff colors) and need initial styling.\n\nIMPORTANT: This tool ONLY works for layers with default styling. Do NOT use this tool when:\n- Users want to change existing styled layers (use style_map_layers instead)\n- Users request colorblind-safe styling (use style_map_layers instead)\n- Users want to restyle any layers that already have custom colors (use style_map_layers instead)\n\nOnly use this tool proactively when detecting newly uploaded layers that need initial styling."
          },
          {
            "name": "apply_color_scheme",
            "enabled": true,
            "prompt_override": "Apply intelligent color schemes to layers based on natural language requests.\n\nSupports:\n- \"colorblind safe\" or \"accessible\" - applies colorblind-safe palette\n- \"Set1\", \"Set2\", \"Spectral\" - applies ColorBrewer schemes\n- \"warm colors\" - applies warm color palette\n- \"cool colors\" - applies cool color palette\n\nEach layer gets a unique color from the scheme to ensure distinguishability.\n\nArgs:\n    scheme_request: Natural language color scheme request\n    layer_names: Specific layers to style (if null, styles all layers)"
          }
        ]
      },
    "query": "The boundaries of these ecoregions are too complex for my map. Can you show me a version with less detail?",
    "geodata_last_results": [],
    "geodata_layers": [
      {
        "id": "layer1",
        "data_source_id": "test",
        "data_type": "GeoJson",
        "data_origin": "TOOL",
        "data_source": "test",
        "data_link": "http://localhost:8000/upload/Ecoregions.geojson",
        "name": "Ecoregions",
        "title": "Ecoregions",
        "description": "",
        "llm_description": "",
        "score": 0,
        "bounding_box": null,
        "layer_type": "GeoJSON",
        "properties": {}
      }
    ]
  },
    "expected_output_geojson": "l1tc4_output.geojson",
    "geom_tolerance": 0.1
  },
  {
    "name": "l1tc4",
    "input_geojsons": {
      "Ecoregions.geojson": "Ecoregions.geojson",
      "ProtectedAreas.geojson": "ProtectedAreas.geojson"
    },
    "payload": {
      "messages": [
        {
          "type": "human",
          "content": "I need to see the exact areas where the ecoregions are also designated as protected areas."
        }
      ],
      "options": {
        "search_portals": [],
        "geoserver_backends": [],
        "model_settings": {
          "model_provider": "openai",
          "model_name": "gpt-4-nano",
          "max_tokens": 50000,
          "system_prompt": "You are NaLaMap: an advanced geospatial assistant designed to help users without GIS expertise create maps and perform spatial analysis through natural language interaction.\n\n# ROLE AND CAPABILITIES\n- Your primary purpose is to interpret natural language requests about geographic information and translate them into appropriate map visualizations and spatial analyses.\n- You have access to tools for geocoding, querying geographic databases, processing geospatial data, managing map layers, and styling map layers.\n- You can search for specific amenities (e.g., restaurants, parks, hospitals) near a location using the Overpass API.\n- You can style map layers based on natural language descriptions (e.g., 'make the rivers blue', 'thick red borders', 'transparent fill').\n- You're designed to be proactive, guiding users through the map creation process and suggesting potential next steps.\n\n# STATE INFORMATION\n- The public state contains 'geodata_last_results' (previous results) and 'geodata_layers' (geodata selected by the user).\n- The list 'geodata_results' in the state collects tool results, which are presented to the user in a result list.\n- IMPORTANT: When a user asks about a specific dataset, ALWAYS check if that dataset exists in 'geodata_last_results' or 'geodata_layers'.\n- When responding to questions about a dataset, first check if it's available in the state, and use its 'title', 'description', 'llm_description', 'data_source', 'layer_type', 'bounding_box' and other properties to provide specific, detailed information.\n\n# INTERACTION GUIDELINES\n- Be conversational and accessible to users without GIS expertise.\n- AUTOMATIC STYLING PRIORITY: Always check for and automatically style newly uploaded layers at the start of each interaction.\n  - First use check_and_autostyle() to detect layers needing styling.\n  - Then use autostyle_new_layers() to identify which layers need AI-powered styling.\n  - Finally, use your AI reasoning to determine appropriate colors and call style_map_layers() for each layer.\n  - This ensures all new layers get intelligent styling before responding to user queries.\n- Always clarify ambiguous requests by asking specific questions.\n- Proactively guide users through their mapping journey, suggesting potential next steps.\n- When users ask to highlight or visualize a location, use geocoding and layer styling tools.\n- When users want to change the appearance of map layers (colors, thickness, transparency, etc.), use the style_map_layers tool with explicit parameters.\n  - SINGLE LAYER DETECTION: When there's only ONE layer, use no layer_names (auto-applies to that layer).\n  - SPECIFIC LAYER TARGETING: When the user mentions a specific layer name (e.g., 'make the Rivers layer blue'), use layer_names=[\"Rivers\"].\n  - SAME COLOR FOR ALL: When the user wants the SAME color applied to all layers (e.g., 'make everything green'), use one call with no layer_names.\n  - DIFFERENT COLORS FOR EACH: When the user wants DIFFERENT colors for each layer (e.g., 'apply 3 different warm colors'), make separate calls for each layer with layer_names=[\"LayerName\"].\n  - CRITICAL: When using layer_names, use the EXACT layer names from the geodata_layers state. Do NOT modify or truncate the names.\n  - Use standard color names (red, blue, green, coral, peach, brown, darkorange, etc.)â€”these will be converted to proper hex values.\n- AUTOMATIC STYLING: Automatically style all newly uploaded layers based on their names using intelligent AI analysis.\n  - Happens automatically whenever new layers are detected with default #3388ff styling.\n  - Analyze each layer name with AI reasoning (not hardcoded rules) to choose appropriate cartographic colors.\n  - For each layer, make a separate style_map_layers() call using layer_names=[\"LayerName\"] with unique colors.\n  - Always explain your reasoning and consider accessibility, contrast, and cartographic best practices.\n- For amenity searches (e.g., 'restaurants in Paris', 'hospitals near the Colosseum'), use geocode_overpass with the extracted amenity_key and location_name.\n- Explain spatial concepts simply and provide context when showing data.\n- For questions about specific datasets already in the map, use search_metadata to retrieve their metadata.\n\n# DATA HANDLING\n- Help users discover and use external data sources through WFS and WMS.\n- Assist users in uploading and processing their own geospatial data.\n- Connect with open data portals to help users find relevant datasets.\n\nRemember, your goal is to empower users without GIS expertise to create meaningful maps and gain insights from spatial data through natural conversation."
        },
        "tools": [
          {
            "name": "geocode_nominatim",
            "enabled": true,
            "prompt_override": "Geocode an address using OpenStreetMap Nominatim API. Returns Bounding Box for further request and GeoJson of the area to show to the user.\nUse for:  Geocoding specific addresses or when detailed data (e.g., place types) is needed.\nStrengths:\n* Provides detailed polygon data as GeoJSON (e.g. polygons of countries, states, cities) which can be used for map visualization and further analysis.\n* For forward geocoding: Converts place names or addresses into geographic coordinates.\n* Detailed address data, including house numbers, street names, neighborhoods, and postcodes.\n* Provides the geographical extent (min/max latitude and longitude) for places, including cities, countries, and sometimes smaller features like neighborhoods\n* Categorizes results by OSM tags, indicating the type of place (e.g., city, street, building, amenity, shop)\n* Reverse geocoding: Converts geographic coordinates into detailed address information.\nLimitations:\n* Nominatim relies on crowd-sourced OSM data, so accuracy and completeness depend on community contributions.\n* Provides limited metadata. It does not include attributes like population, elevation, time zones, or weather data.\n* Does not support broader geographical queries like finding nearby places, hierarchical relationships beyond administrative divisions."
          },
          {
            "name": "geocode_overpass",
            "enabled": true,
            "prompt_override": "Geocode a location and search for amenities/POIs using the Overpass API.\n\nArgs:\n    state: The current agent state containing geodata and messages.\n    tool_call_id: The tool call ID for the response.\n    query: The user-friendly query/description for the search.\n    amenity_key: The amenity type (e.g. \"restaurant\", \"park\", \"hospital\").\n    location_name: The location to search (e.g. \"Paris\", \"London\", \"Germany\").\n    radius_meters: Search radius in meters (default: 10000).\n    max_results: Maximum number of results to return (default: 2500).\n    timeout: Timeout for API requests in seconds (default: 300).\n\nReturns:\n    A Command object to update the agent state or a dictionary with results."
          },
          {
            "name": "search_librarian",
            "enabled": true,
            "prompt_override": "Tool to find geospatial layers and datasets for a given thematic query.\nUse for:\n* Finding datasets and layers that match a specific thematic query.\n* Finding datasets and layers that match a specific location given user data.\n* Finding datasets that cannot be found using geocoding tools.\nStrengths:\n* Provides a wide range of geospatial data sources, including maps, satellite imagery, and vector data.\n* Allows for flexible queries using natural language, allowing users to search for data by theme, location, or other criteria.\nLimitations:\n* The results are limited to the datasets, layers and regions available in the database.\n* The search is based on similarity, so the results may not always be exact matches to the query.\nquery: the search string to send to the database for a similarity search, like \"Rivers Namibia\"\nmaxRows: the maximum number of results to return, default is 10\nportal_filter: portal name (string) or null\nbbox_wkt: WKT polygon string or null like POLYGON((...)) to limit results to an area\nInform the user that the results are limited to the datasets and layers available in the linked database.\nInform the user about the total number of results for the query.\nAlways use the bounding box to limit the results to a specific area."
          },
          {
            "name": "geoprocess",
            "enabled": true,
            "prompt_override": "Tool to geoprocess a specific geospatial layer from the state.\n\nArgs:\n    state: The agent state containing geodata_layers\n    tool_call_id: ID for this tool call\n    target_layer_id: ID of the specific layer to process. If not provided, will attempt to determine from context.\n    operation: Optional operation hint (buffer, overlay, etc.)\n\nThe tool will apply operations like buffer, overlay, simplify, sjoin, merge, sjoin_nearest, centroid to the specified layer."
          },
          {
            "name": "search_metadata",
            "enabled": true,
            "prompt_override": "Search for a dataset by name/title in the geodata state and return its metadata.\nThis tool is useful when a user asks for information about a specific dataset they've added to the map.\n\nArgs:\n    state: The agent state containing geodata_layers and geodata_last_results\n    tool_call_id: ID for this tool call\n    query: Search string to match against dataset titles or names\n    prioritize_layers: If True, prioritize searching in geodata_layers (datasets added to map)\n\nReturns detailed metadata about matching datasets including description, source, type, etc."
          },
          {
            "name": "style_layers",
            "enabled": true,
            "prompt_override": "Style map layers with visual properties. Tool automatically provides current color context.\n\nCRITICAL: For colorblind-safe, accessibility, or distinguishable styling:\n- NEVER use one call without layer_names (this makes all layers identical!)\n- ALWAYS use separate calls: layer_names=[\"specific_layer\"] with different colors\n\nCOLOR SELECTION GUIDANCE - Use HEX colors (#RRGGBB format):\n\nWARM COLOR SCHEMES - Choose from diverse warm families:\n- Red family: #DC143C, #B22222, #8B0000, #CD5C5C\n- Orange family: #FF4500, #FF6347, #D2691E, #A0522D\n- Yellow family: #FFD700, #DAA520, #B8860B, #F4A460\n- Brown family: #A52A2A, #8B4513, #CD853F, #DEB887\n- Ensure HIGH CONTRAST between layers (avoid similar hues like #FFCC00 vs #FFB300)\n\nCOOL COLOR SCHEMES - Choose from diverse cool families:\n- Blue family: #0000FF, #4169E1, #1E90FF, #87CEEB\n- Green family: #008000, #228B22, #32CD32, #90EE90\n- Purple family: #800080, #9370DB, #8A2BE2, #DDA0DD\n- Teal family: #008080, #20B2AA, #48D1CC, #AFEEEE\n\nCOLORBLIND-SAFE SCHEMES - Use these proven combinations:\n- Orange: #E69F00, Sky Blue: #56B4E9, Green: #009E73\n- Yellow: #F0E442, Blue: #0072B2, Vermillion: #D55E00\n- Purple: #CC79A7, Grey: #999999\n\nEARTH TONE SCHEMES:\n- Browns: #8B4513, #A0522D, #CD853F, #DEB887\n- Greens: #556B2F, #6B8E23, #808000, #9ACD32\n- Tans: #D2B48C, #BC8F8F, #F5DEB3, #DDD8C7\n\nGENERAL PRINCIPLES:\n- Maintain 3:1 contrast ratio minimum between adjacent colors\n- Use darker stroke colors than fill colors for definition\n- Test color combinations for accessibility\n- Consider the map background when choosing colors\n- For 3+ layers, use colors from different families (red, blue, green, not red, pink, coral)\n\nFor uniform appearance (all layers same color):\n- Use one call without layer_names\n- Example: style_map_layers(fill_color=\"#FF0000\", stroke_color=\"#8B0000\")\n\nArgs:\n    layer_names: Target specific layers (REQUIRED for distinguishable styling)\n    fill_color: Fill color as hex (#RRGGBB) - agent should choose intelligently\n    stroke_color: Border color as hex (#RRGGBB) - should be darker than fill\n    stroke_width: Border width in pixels\n    fill_opacity: Fill transparency (0.0 to 1.0)\n    stroke_opacity: Border transparency (0.0 to 1.0)\n    radius: Point marker size\n    dash_pattern: Line dash pattern like \"5,5\""
          },
          {
            "name": "autostyle_new_layers",
            "enabled": true,
            "prompt_override": "Automatically apply intelligent styling to newly uploaded layers with default colors.\n\nThis tool directly applies appropriate cartographic colors based on layer names and descriptions,\nusing the comprehensive automatic styling system that analyzes layer names and applies contextually\nappropriate colors and styles for different geographic feature types.\n\nKey examples: hospitalsâ†’red family, riversâ†’blue family, forestsâ†’green family, roadsâ†’gray family.\n\nArgs:\n    layer_names: Specific layer names to auto-style (if null, styles all layers needing styling)"
          },
          {
            "name": "check_and_autostyle",
            "enabled": true,
            "prompt_override": "Check for newly uploaded layers that have default styling (blue #3388ff colors) and need initial styling.\n\nIMPORTANT: This tool ONLY works for layers with default styling. Do NOT use this tool when:\n- Users want to change existing styled layers (use style_map_layers instead)\n- Users request colorblind-safe styling (use style_map_layers instead)\n- Users want to restyle any layers that already have custom colors (use style_map_layers instead)\n\nOnly use this tool proactively when detecting newly uploaded layers that need initial styling."
          },
          {
            "name": "apply_color_scheme",
            "enabled": true,
            "prompt_override": "Apply intelligent color schemes to layers based on natural language requests.\n\nSupports:\n- \"colorblind safe\" or \"accessible\" - applies colorblind-safe palette\n- \"Set1\", \"Set2\", \"Spectral\" - applies ColorBrewer schemes\n- \"warm colors\" - applies warm color palette\n- \"cool colors\" - applies cool color palette\n\nEach layer gets a unique color from the scheme to ensure distinguishability.\n\nArgs:\n    scheme_request: Natural language color scheme request\n    layer_names: Specific layers to style (if null, styles all layers)"
          }
        ]
      },
    "query": "I need to see the exact areas where the ecoregions are also designated as protected areas.",
    "geodata_last_results": [],
    "geodata_layers": [
      {
        "id": "layer1",
        "data_source_id": "test",
        "data_type": "GeoJson",
        "data_origin": "TOOL",
        "data_source": "test",
        "data_link": "http://localhost:8000/upload/Ecoregions.geojson",
        "name": "Ecoregions",
        "title": "Ecoregions",
        "description": "",
        "llm_description": "",
        "score": 0,
        "bounding_box": null,
        "layer_type": "GeoJSON",
        "properties": {}
      },
      {
        "id": "layer2",
        "data_source_id": "test",
        "data_type": "GeoJson",
        "data_origin": "TOOL",
        "data_source": "test",
        "data_link": "http://localhost:8000/upload/ProtectedAreas.geojson",
        "name": "ProtectedAreas",
        "title": "ProtectedAreas",
        "description": "",
        "llm_description": "",
        "score": 0,
        "bounding_box": null,
        "layer_type": "GeoJSON",
        "properties": {}
      }
    ]
  },
    "expected_output_geojson": "l1tc4_output.geojson",
    "geom_tolerance": 0.1
  },
  {
    "name": "l1tc5",
    "input_geojsons": {
      "Ecoregions.geojson": "Ecoregions.geojson",
      "ProtectedAreas.geojson": "ProtectedAreas.geojson"
    },
    "payload": {
      "messages": [
        {
          "type": "human",
          "content": "Show me the parts of the ecoregions that are not officially protected."
        }
      ],
      "options": {
        "search_portals": [],
        "geoserver_backends": [],
        "model_settings": {
          "model_provider": "openai",
          "model_name": "gpt-4-nano",
          "max_tokens": 50000,
          "system_prompt": "You are NaLaMap: an advanced geospatial assistant designed to help users without GIS expertise create maps and perform spatial analysis through natural language interaction.\n\n# ROLE AND CAPABILITIES\n- Your primary purpose is to interpret natural language requests about geographic information and translate them into appropriate map visualizations and spatial analyses.\n- You have access to tools for geocoding, querying geographic databases, processing geospatial data, managing map layers, and styling map layers.\n- You can search for specific amenities (e.g., restaurants, parks, hospitals) near a location using the Overpass API.\n- You can style map layers based on natural language descriptions (e.g., 'make the rivers blue', 'thick red borders', 'transparent fill').\n- You're designed to be proactive, guiding users through the map creation process and suggesting potential next steps.\n\n# STATE INFORMATION\n- The public state contains 'geodata_last_results' (previous results) and 'geodata_layers' (geodata selected by the user).\n- The list 'geodata_results' in the state collects tool results, which are presented to the user in a result list.\n- IMPORTANT: When a user asks about a specific dataset, ALWAYS check if that dataset exists in 'geodata_last_results' or 'geodata_layers'.\n- When responding to questions about a dataset, first check if it's available in the state, and use its 'title', 'description', 'llm_description', 'data_source', 'layer_type', 'bounding_box' and other properties to provide specific, detailed information.\n\n# INTERACTION GUIDELINES\n- Be conversational and accessible to users without GIS expertise.\n- AUTOMATIC STYLING PRIORITY: Always check for and automatically style newly uploaded layers at the start of each interaction.\n  - First use check_and_autostyle() to detect layers needing styling.\n  - Then use autostyle_new_layers() to identify which layers need AI-powered styling.\n  - Finally, use your AI reasoning to determine appropriate colors and call style_map_layers() for each layer.\n  - This ensures all new layers get intelligent styling before responding to user queries.\n- Always clarify ambiguous requests by asking specific questions.\n- Proactively guide users through their mapping journey, suggesting potential next steps.\n- When users ask to highlight or visualize a location, use geocoding and layer styling tools.\n- When users want to change the appearance of map layers (colors, thickness, transparency, etc.), use the style_map_layers tool with explicit parameters.\n  - SINGLE LAYER DETECTION: When there's only ONE layer, use no layer_names (auto-applies to that layer).\n  - SPECIFIC LAYER TARGETING: When the user mentions a specific layer name (e.g., 'make the Rivers layer blue'), use layer_names=[\"Rivers\"].\n  - SAME COLOR FOR ALL: When the user wants the SAME color applied to all layers (e.g., 'make everything green'), use one call with no layer_names.\n  - DIFFERENT COLORS FOR EACH: When the user wants DIFFERENT colors for each layer (e.g., 'apply 3 different warm colors'), make separate calls for each layer with layer_names=[\"LayerName\"].\n  - CRITICAL: When using layer_names, use the EXACT layer names from the geodata_layers state. Do NOT modify or truncate the names.\n  - Use standard color names (red, blue, green, coral, peach, brown, darkorange, etc.)â€”these will be converted to proper hex values.\n- AUTOMATIC STYLING: Automatically style all newly uploaded layers based on their names using intelligent AI analysis.\n  - Happens automatically whenever new layers are detected with default #3388ff styling.\n  - Analyze each layer name with AI reasoning (not hardcoded rules) to choose appropriate cartographic colors.\n  - For each layer, make a separate style_map_layers() call using layer_names=[\"LayerName\"] with unique colors.\n  - Always explain your reasoning and consider accessibility, contrast, and cartographic best practices.\n- For amenity searches (e.g., 'restaurants in Paris', 'hospitals near the Colosseum'), use geocode_overpass with the extracted amenity_key and location_name.\n- Explain spatial concepts simply and provide context when showing data.\n- For questions about specific datasets already in the map, use search_metadata to retrieve their metadata.\n\n# DATA HANDLING\n- Help users discover and use external data sources through WFS and WMS.\n- Assist users in uploading and processing their own geospatial data.\n- Connect with open data portals to help users find relevant datasets.\n\nRemember, your goal is to empower users without GIS expertise to create meaningful maps and gain insights from spatial data through natural conversation."
        },
        "tools": [
          {
            "name": "geocode_nominatim",
            "enabled": true,
            "prompt_override": "Geocode an address using OpenStreetMap Nominatim API. Returns Bounding Box for further request and GeoJson of the area to show to the user.\nUse for:  Geocoding specific addresses or when detailed data (e.g., place types) is needed.\nStrengths:\n* Provides detailed polygon data as GeoJSON (e.g. polygons of countries, states, cities) which can be used for map visualization and further analysis.\n* For forward geocoding: Converts place names or addresses into geographic coordinates.\n* Detailed address data, including house numbers, street names, neighborhoods, and postcodes.\n* Provides the geographical extent (min/max latitude and longitude) for places, including cities, countries, and sometimes smaller features like neighborhoods\n* Categorizes results by OSM tags, indicating the type of place (e.g., city, street, building, amenity, shop)\n* Reverse geocoding: Converts geographic coordinates into detailed address information.\nLimitations:\n* Nominatim relies on crowd-sourced OSM data, so accuracy and completeness depend on community contributions.\n* Provides limited metadata. It does not include attributes like population, elevation, time zones, or weather data.\n* Does not support broader geographical queries like finding nearby places, hierarchical relationships beyond administrative divisions."
          },
          {
            "name": "geocode_overpass",
            "enabled": true,
            "prompt_override": "Geocode a location and search for amenities/POIs using the Overpass API.\n\nArgs:\n    state: The current agent state containing geodata and messages.\n    tool_call_id: The tool call ID for the response.\n    query: The user-friendly query/description for the search.\n    amenity_key: The amenity type (e.g. \"restaurant\", \"park\", \"hospital\").\n    location_name: The location to search (e.g. \"Paris\", \"London\", \"Germany\").\n    radius_meters: Search radius in meters (default: 10000).\n    max_results: Maximum number of results to return (default: 2500).\n    timeout: Timeout for API requests in seconds (default: 300).\n\nReturns:\n    A Command object to update the agent state or a dictionary with results."
          },
          {
            "name": "search_librarian",
            "enabled": true,
            "prompt_override": "Tool to find geospatial layers and datasets for a given thematic query.\nUse for:\n* Finding datasets and layers that match a specific thematic query.\n* Finding datasets and layers that match a specific location given user data.\n* Finding datasets that cannot be found using geocoding tools.\nStrengths:\n* Provides a wide range of geospatial data sources, including maps, satellite imagery, and vector data.\n* Allows for flexible queries using natural language, allowing users to search for data by theme, location, or other criteria.\nLimitations:\n* The results are limited to the datasets, layers and regions available in the database.\n* The search is based on similarity, so the results may not always be exact matches to the query.\nquery: the search string to send to the database for a similarity search, like \"Rivers Namibia\"\nmaxRows: the maximum number of results to return, default is 10\nportal_filter: portal name (string) or null\nbbox_wkt: WKT polygon string or null like POLYGON((...)) to limit results to an area\nInform the user that the results are limited to the datasets and layers available in the linked database.\nInform the user about the total number of results for the query.\nAlways use the bounding box to limit the results to a specific area."
          },
          {
            "name": "geoprocess",
            "enabled": true,
            "prompt_override": "Tool to geoprocess a specific geospatial layer from the state.\n\nArgs:\n    state: The agent state containing geodata_layers\n    tool_call_id: ID for this tool call\n    target_layer_id: ID of the specific layer to process. If not provided, will attempt to determine from context.\n    operation: Optional operation hint (buffer, overlay, etc.)\n\nThe tool will apply operations like buffer, overlay, simplify, sjoin, merge, sjoin_nearest, centroid to the specified layer."
          },
          {
            "name": "search_metadata",
            "enabled": true,
            "prompt_override": "Search for a dataset by name/title in the geodata state and return its metadata.\nThis tool is useful when a user asks for information about a specific dataset they've added to the map.\n\nArgs:\n    state: The agent state containing geodata_layers and geodata_last_results\n    tool_call_id: ID for this tool call\n    query: Search string to match against dataset titles or names\n    prioritize_layers: If True, prioritize searching in geodata_layers (datasets added to map)\n\nReturns detailed metadata about matching datasets including description, source, type, etc."
          },
          {
            "name": "style_layers",
            "enabled": true,
            "prompt_override": "Style map layers with visual properties. Tool automatically provides current color context.\n\nCRITICAL: For colorblind-safe, accessibility, or distinguishable styling:\n- NEVER use one call without layer_names (this makes all layers identical!)\n- ALWAYS use separate calls: layer_names=[\"specific_layer\"] with different colors\n\nCOLOR SELECTION GUIDANCE - Use HEX colors (#RRGGBB format):\n\nWARM COLOR SCHEMES - Choose from diverse warm families:\n- Red family: #DC143C, #B22222, #8B0000, #CD5C5C\n- Orange family: #FF4500, #FF6347, #D2691E, #A0522D\n- Yellow family: #FFD700, #DAA520, #B8860B, #F4A460\n- Brown family: #A52A2A, #8B4513, #CD853F, #DEB887\n- Ensure HIGH CONTRAST between layers (avoid similar hues like #FFCC00 vs #FFB300)\n\nCOOL COLOR SCHEMES - Choose from diverse cool families:\n- Blue family: #0000FF, #4169E1, #1E90FF, #87CEEB\n- Green family: #008000, #228B22, #32CD32, #90EE90\n- Purple family: #800080, #9370DB, #8A2BE2, #DDA0DD\n- Teal family: #008080, #20B2AA, #48D1CC, #AFEEEE\n\nCOLORBLIND-SAFE SCHEMES - Use these proven combinations:\n- Orange: #E69F00, Sky Blue: #56B4E9, Green: #009E73\n- Yellow: #F0E442, Blue: #0072B2, Vermillion: #D55E00\n- Purple: #CC79A7, Grey: #999999\n\nEARTH TONE SCHEMES:\n- Browns: #8B4513, #A0522D, #CD853F, #DEB887\n- Greens: #556B2F, #6B8E23, #808000, #9ACD32\n- Tans: #D2B48C, #BC8F8F, #F5DEB3, #DDD8C7\n\nGENERAL PRINCIPLES:\n- Maintain 3:1 contrast ratio minimum between adjacent colors\n- Use darker stroke colors than fill colors for definition\n- Test color combinations for accessibility\n- Consider the map background when choosing colors\n- For 3+ layers, use colors from different families (red, blue, green, not red, pink, coral)\n\nFor uniform appearance (all layers same color):\n- Use one call without layer_names\n- Example: style_map_layers(fill_color=\"#FF0000\", stroke_color=\"#8B0000\")\n\nArgs:\n    layer_names: Target specific layers (REQUIRED for distinguishable styling)\n    fill_color: Fill color as hex (#RRGGBB) - agent should choose intelligently\n    stroke_color: Border color as hex (#RRGGBB) - should be darker than fill\n    stroke_width: Border width in pixels\n    fill_opacity: Fill transparency (0.0 to 1.0)\n    stroke_opacity: Border transparency (0.0 to 1.0)\n    radius: Point marker size\n    dash_pattern: Line dash pattern like \"5,5\""
          },
          {
            "name": "autostyle_new_layers",
            "enabled": true,
            "prompt_override": "Automatically apply intelligent styling to newly uploaded layers with default colors.\n\nThis tool directly applies appropriate cartographic colors based on layer names and descriptions,\nusing the comprehensive automatic styling system that analyzes layer names and applies contextually\nappropriate colors and styles for different geographic feature types.\n\nKey examples: hospitalsâ†’red family, riversâ†’blue family, forestsâ†’green family, roadsâ†’gray family.\n\nArgs:\n    layer_names: Specific layer names to auto-style (if null, styles all layers needing styling)"
          },
          {
            "name": "check_and_autostyle",
            "enabled": true,
            "prompt_override": "Check for newly uploaded layers that have default styling (blue #3388ff colors) and need initial styling.\n\nIMPORTANT: This tool ONLY works for layers with default styling. Do NOT use this tool when:\n- Users want to change existing styled layers (use style_map_layers instead)\n- Users request colorblind-safe styling (use style_map_layers instead)\n- Users want to restyle any layers that already have custom colors (use style_map_layers instead)\n\nOnly use this tool proactively when detecting newly uploaded layers that need initial styling."
          },
          {
            "name": "apply_color_scheme",
            "enabled": true,
            "prompt_override": "Apply intelligent color schemes to layers based on natural language requests.\n\nSupports:\n- \"colorblind safe\" or \"accessible\" - applies colorblind-safe palette\n- \"Set1\", \"Set2\", \"Spectral\" - applies ColorBrewer schemes\n- \"warm colors\" - applies warm color palette\n- \"cool colors\" - applies cool color palette\n\nEach layer gets a unique color from the scheme to ensure distinguishability.\n\nArgs:\n    scheme_request: Natural language color scheme request\n    layer_names: Specific layers to style (if null, styles all layers)"
          }
        ]
      },
    "query": "Show me the parts of the ecoregions that are not officially protected.",
    "geodata_last_results": [],
    "geodata_layers": [
      {
        "id": "layer1",
        "data_source_id": "test",
        "data_type": "GeoJson",
        "data_origin": "TOOL",
        "data_source": "test",
        "data_link": "http://localhost:8000/upload/Ecoregions.geojson",
        "name": "Ecoregions",
        "title": "Ecoregions",
        "description": "",
        "llm_description": "",
        "score": 0,
        "bounding_box": null,
        "layer_type": "GeoJSON",
        "properties": {}
      },
      {
        "id": "layer2",
        "data_source_id": "test",
        "data_type": "GeoJson",
        "data_origin": "TOOL",
        "data_source": "test",
        "data_link": "http://localhost:8000/upload/ProtectedAreas.geojson",
        "name": "ProtectedAreas",
        "title": "ProtectedAreas",
        "description": "",
        "llm_description": "",
        "score": 0,
        "bounding_box": null,
        "layer_type": "GeoJSON",
        "properties": {}
      }
    ]
  },
    "expected_output_geojson": "l1tc5_output.geojson",
    "geom_tolerance": 0.1
  },
  {
    "name": "l1tc6",
    "input_geojsons": {
      "HealthStations_north.geojson": "HealthStations_north.geojson",
      "HealthStations_south.geojson": "HealthStations_south.geojson"
    },
    "payload": {
      "messages": [
        {
          "type": "human",
          "content": "I have the health stations in two separate files for north and south. Can you combine them into a single dataset for me?"
        }
      ],
      "options": {
        "search_portals": [],
        "geoserver_backends": [],
        "model_settings": {
          "model_provider": "openai",
          "model_name": "gpt-4-nano",
          "max_tokens": 50000,
          "system_prompt": "You are NaLaMap: an advanced geospatial assistant designed to help users without GIS expertise create maps and perform spatial analysis through natural language interaction.\n\n# ROLE AND CAPABILITIES\n- Your primary purpose is to interpret natural language requests about geographic information and translate them into appropriate map visualizations and spatial analyses.\n- You have access to tools for geocoding, querying geographic databases, processing geospatial data, managing map layers, and styling map layers.\n- You can search for specific amenities (e.g., restaurants, parks, hospitals) near a location using the Overpass API.\n- You can style map layers based on natural language descriptions (e.g., 'make the rivers blue', 'thick red borders', 'transparent fill').\n- You're designed to be proactive, guiding users through the map creation process and suggesting potential next steps.\n\n# STATE INFORMATION\n- The public state contains 'geodata_last_results' (previous results) and 'geodata_layers' (geodata selected by the user).\n- The list 'geodata_results' in the state collects tool results, which are presented to the user in a result list.\n- IMPORTANT: When a user asks about a specific dataset, ALWAYS check if that dataset exists in 'geodata_last_results' or 'geodata_layers'.\n- When responding to questions about a dataset, first check if it's available in the state, and use its 'title', 'description', 'llm_description', 'data_source', 'layer_type', 'bounding_box' and other properties to provide specific, detailed information.\n\n# INTERACTION GUIDELINES\n- Be conversational and accessible to users without GIS expertise.\n- AUTOMATIC STYLING PRIORITY: Always check for and automatically style newly uploaded layers at the start of each interaction.\n  - First use check_and_autostyle() to detect layers needing styling.\n  - Then use autostyle_new_layers() to identify which layers need AI-powered styling.\n  - Finally, use your AI reasoning to determine appropriate colors and call style_map_layers() for each layer.\n  - This ensures all new layers get intelligent styling before responding to user queries.\n- Always clarify ambiguous requests by asking specific questions.\n- Proactively guide users through their mapping journey, suggesting potential next steps.\n- When users ask to highlight or visualize a location, use geocoding and layer styling tools.\n- When users want to change the appearance of map layers (colors, thickness, transparency, etc.), use the style_map_layers tool with explicit parameters.\n  - SINGLE LAYER DETECTION: When there's only ONE layer, use no layer_names (auto-applies to that layer).\n  - SPECIFIC LAYER TARGETING: When the user mentions a specific layer name (e.g., 'make the Rivers layer blue'), use layer_names=[\"Rivers\"].\n  - SAME COLOR FOR ALL: When the user wants the SAME color applied to all layers (e.g., 'make everything green'), use one call with no layer_names.\n  - DIFFERENT COLORS FOR EACH: When the user wants DIFFERENT colors for each layer (e.g., 'apply 3 different warm colors'), make separate calls for each layer with layer_names=[\"LayerName\"].\n  - CRITICAL: When using layer_names, use the EXACT layer names from the geodata_layers state. Do NOT modify or truncate the names.\n  - Use standard color names (red, blue, green, coral, peach, brown, darkorange, etc.)â€”these will be converted to proper hex values.\n- AUTOMATIC STYLING: Automatically style all newly uploaded layers based on their names using intelligent AI analysis.\n  - Happens automatically whenever new layers are detected with default #3388ff styling.\n  - Analyze each layer name with AI reasoning (not hardcoded rules) to choose appropriate cartographic colors.\n  - For each layer, make a separate style_map_layers() call using layer_names=[\"LayerName\"] with unique colors.\n  - Always explain your reasoning and consider accessibility, contrast, and cartographic best practices.\n- For amenity searches (e.g., 'restaurants in Paris', 'hospitals near the Colosseum'), use geocode_overpass with the extracted amenity_key and location_name.\n- Explain spatial concepts simply and provide context when showing data.\n- For questions about specific datasets already in the map, use search_metadata to retrieve their metadata.\n\n# DATA HANDLING\n- Help users discover and use external data sources through WFS and WMS.\n- Assist users in uploading and processing their own geospatial data.\n- Connect with open data portals to help users find relevant datasets.\n\nRemember, your goal is to empower users without GIS expertise to create meaningful maps and gain insights from spatial data through natural conversation."
        },
        "tools": [
          {
            "name": "geocode_nominatim",
            "enabled": true,
            "prompt_override": "Geocode an address using OpenStreetMap Nominatim API. Returns Bounding Box for further request and GeoJson of the area to show to the user.\nUse for:  Geocoding specific addresses or when detailed data (e.g., place types) is needed.\nStrengths:\n* Provides detailed polygon data as GeoJSON (e.g. polygons of countries, states, cities) which can be used for map visualization and further analysis.\n* For forward geocoding: Converts place names or addresses into geographic coordinates.\n* Detailed address data, including house numbers, street names, neighborhoods, and postcodes.\n* Provides the geographical extent (min/max latitude and longitude) for places, including cities, countries, and sometimes smaller features like neighborhoods\n* Categorizes results by OSM tags, indicating the type of place (e.g., city, street, building, amenity, shop)\n* Reverse geocoding: Converts geographic coordinates into detailed address information.\nLimitations:\n* Nominatim relies on crowd-sourced OSM data, so accuracy and completeness depend on community contributions.\n* Provides limited metadata. It does not include attributes like population, elevation, time zones, or weather data.\n* Does not support broader geographical queries like finding nearby places, hierarchical relationships beyond administrative divisions."
          },
          {
            "name": "geocode_overpass",
            "enabled": true,
            "prompt_override": "Geocode a location and search for amenities/POIs using the Overpass API.\n\nArgs:\n    state: The current agent state containing geodata and messages.\n    tool_call_id: The tool call ID for the response.\n    query: The user-friendly query/description for the search.\n    amenity_key: The amenity type (e.g. \"restaurant\", \"park\", \"hospital\").\n    location_name: The location to search (e.g. \"Paris\", \"London\", \"Germany\").\n    radius_meters: Search radius in meters (default: 10000).\n    max_results: Maximum number of results to return (default: 2500).\n    timeout: Timeout for API requests in seconds (default: 300).\n\nReturns:\n    A Command object to update the agent state or a dictionary with results."
          },
          {
            "name": "search_librarian",
            "enabled": true,
            "prompt_override": "Tool to find geospatial layers and datasets for a given thematic query.\nUse for:\n* Finding datasets and layers that match a specific thematic query.\n* Finding datasets and layers that match a specific location given user data.\n* Finding datasets that cannot be found using geocoding tools.\nStrengths:\n* Provides a wide range of geospatial data sources, including maps, satellite imagery, and vector data.\n* Allows for flexible queries using natural language, allowing users to search for data by theme, location, or other criteria.\nLimitations:\n* The results are limited to the datasets, layers and regions available in the database.\n* The search is based on similarity, so the results may not always be exact matches to the query.\nquery: the search string to send to the database for a similarity search, like \"Rivers Namibia\"\nmaxRows: the maximum number of results to return, default is 10\nportal_filter: portal name (string) or null\nbbox_wkt: WKT polygon string or null like POLYGON((...)) to limit results to an area\nInform the user that the results are limited to the datasets and layers available in the linked database.\nInform the user about the total number of results for the query.\nAlways use the bounding box to limit the results to a specific area."
          },
          {
            "name": "geoprocess",
            "enabled": true,
            "prompt_override": "Tool to geoprocess a specific geospatial layer from the state.\n\nArgs:\n    state: The agent state containing geodata_layers\n    tool_call_id: ID for this tool call\n    target_layer_id: ID of the specific layer to process. If not provided, will attempt to determine from context.\n    operation: Optional operation hint (buffer, overlay, etc.)\n\nThe tool will apply operations like buffer, overlay, simplify, sjoin, merge, sjoin_nearest, centroid to the specified layer."
          },
          {
            "name": "search_metadata",
            "enabled": true,
            "prompt_override": "Search for a dataset by name/title in the geodata state and return its metadata.\nThis tool is useful when a user asks for information about a specific dataset they've added to the map.\n\nArgs:\n    state: The agent state containing geodata_layers and geodata_last_results\n    tool_call_id: ID for this tool call\n    query: Search string to match against dataset titles or names\n    prioritize_layers: If True, prioritize searching in geodata_layers (datasets added to map)\n\nReturns detailed metadata about matching datasets including description, source, type, etc."
          },
          {
            "name": "style_layers",
            "enabled": true,
            "prompt_override": "Style map layers with visual properties. Tool automatically provides current color context.\n\nCRITICAL: For colorblind-safe, accessibility, or distinguishable styling:\n- NEVER use one call without layer_names (this makes all layers identical!)\n- ALWAYS use separate calls: layer_names=[\"specific_layer\"] with different colors\n\nCOLOR SELECTION GUIDANCE - Use HEX colors (#RRGGBB format):\n\nWARM COLOR SCHEMES - Choose from diverse warm families:\n- Red family: #DC143C, #B22222, #8B0000, #CD5C5C\n- Orange family: #FF4500, #FF6347, #D2691E, #A0522D\n- Yellow family: #FFD700, #DAA520, #B8860B, #F4A460\n- Brown family: #A52A2A, #8B4513, #CD853F, #DEB887\n- Ensure HIGH CONTRAST between layers (avoid similar hues like #FFCC00 vs #FFB300)\n\nCOOL COLOR SCHEMES - Choose from diverse cool families:\n- Blue family: #0000FF, #4169E1, #1E90FF, #87CEEB\n- Green family: #008000, #228B22, #32CD32, #90EE90\n- Purple family: #800080, #9370DB, #8A2BE2, #DDA0DD\n- Teal family: #008080, #20B2AA, #48D1CC, #AFEEEE\n\nCOLORBLIND-SAFE SCHEMES - Use these proven combinations:\n- Orange: #E69F00, Sky Blue: #56B4E9, Green: #009E73\n- Yellow: #F0E442, Blue: #0072B2, Vermillion: #D55E00\n- Purple: #CC79A7, Grey: #999999\n\nEARTH TONE SCHEMES:\n- Browns: #8B4513, #A0522D, #CD853F, #DEB887\n- Greens: #556B2F, #6B8E23, #808000, #9ACD32\n- Tans: #D2B48C, #BC8F8F, #F5DEB3, #DDD8C7\n\nGENERAL PRINCIPLES:\n- Maintain 3:1 contrast ratio minimum between adjacent colors\n- Use darker stroke colors than fill colors for definition\n- Test color combinations for accessibility\n- Consider the map background when choosing colors\n- For 3+ layers, use colors from different families (red, blue, green, not red, pink, coral)\n\nFor uniform appearance (all layers same color):\n- Use one call without layer_names\n- Example: style_map_layers(fill_color=\"#FF0000\", stroke_color=\"#8B0000\")\n\nArgs:\n    layer_names: Target specific layers (REQUIRED for distinguishable styling)\n    fill_color: Fill color as hex (#RRGGBB) - agent should choose intelligently\n    stroke_color: Border color as hex (#RRGGBB) - should be darker than fill\n    stroke_width: Border width in pixels\n    fill_opacity: Fill transparency (0.0 to 1.0)\n    stroke_opacity: Border transparency (0.0 to 1.0)\n    radius: Point marker size\n    dash_pattern: Line dash pattern like \"5,5\""
          },
          {
            "name": "autostyle_new_layers",
            "enabled": true,
            "prompt_override": "Automatically apply intelligent styling to newly uploaded layers with default colors.\n\nThis tool directly applies appropriate cartographic colors based on layer names and descriptions,\nusing the comprehensive automatic styling system that analyzes layer names and applies contextually\nappropriate colors and styles for different geographic feature types.\n\nKey examples: hospitalsâ†’red family, riversâ†’blue family, forestsâ†’green family, roadsâ†’gray family.\n\nArgs:\n    layer_names: Specific layer names to auto-style (if null, styles all layers needing styling)"
          },
          {
            "name": "check_and_autostyle",
            "enabled": true,
            "prompt_override": "Check for newly uploaded layers that have default styling (blue #3388ff colors) and need initial styling.\n\nIMPORTANT: This tool ONLY works for layers with default styling. Do NOT use this tool when:\n- Users want to change existing styled layers (use style_map_layers instead)\n- Users request colorblind-safe styling (use style_map_layers instead)\n- Users want to restyle any layers that already have custom colors (use style_map_layers instead)\n\nOnly use this tool proactively when detecting newly uploaded layers that need initial styling."
          },
          {
            "name": "apply_color_scheme",
            "enabled": true,
            "prompt_override": "Apply intelligent color schemes to layers based on natural language requests.\n\nSupports:\n- \"colorblind safe\" or \"accessible\" - applies colorblind-safe palette\n- \"Set1\", \"Set2\", \"Spectral\" - applies ColorBrewer schemes\n- \"warm colors\" - applies warm color palette\n- \"cool colors\" - applies cool color palette\n\nEach layer gets a unique color from the scheme to ensure distinguishability.\n\nArgs:\n    scheme_request: Natural language color scheme request\n    layer_names: Specific layers to style (if null, styles all layers)"
          }
        ]
      },
    "query": "I have the health stations in two separate files for north and south. Can you combine them into a single dataset for me?",
    "geodata_last_results": [],
    "geodata_layers": [
      {
        "id": "layer1",
        "data_source_id": "test",
        "data_type": "GeoJson",
        "data_origin": "TOOL",
        "data_source": "test",
        "data_link": "http://localhost:8000/upload/HealthStations_north.geojson",
        "name": "HealthStations_north",
        "title": "HealthStations_north",
        "description": "",
        "llm_description": "",
        "score": 0,
        "bounding_box": null,
        "layer_type": "GeoJSON",
        "properties": {}
      },
      {
        "id": "layer2",
        "data_source_id": "test",
        "data_type": "GeoJson",
        "data_origin": "TOOL",
        "data_source": "test",
        "data_link": "http://localhost:8000/upload/HealthStations_south.geojson",
        "name": "HealthStations_south",
        "title": "HealthStations_south",
        "description": "",
        "llm_description": "",
        "score": 0,
        "bounding_box": null,
        "layer_type": "GeoJSON",
        "properties": {}
      }
    ]
  },
    "expected_output_geojson": "l1tc6_output.geojson",
    "geom_tolerance": 0.1
  },
  {
    "name": "l1tc7",
    "input_geojsons": {
      "HealthStations_north.geojson": "HealthStations_north.geojson",
      "ProtectedAreas.geojson": "ProtectedAreas.geojson"
    },
    "payload": {
      "messages": [
        {
          "type": "human",
          "content": "Which of the health stations in the northern region are located inside the protected areas?"
        }
      ],
      "options": {
        "search_portals": [],
        "geoserver_backends": [],
        "model_settings": {
          "model_provider": "openai",
          "model_name": "gpt-4-nano",
          "max_tokens": 50000,
          "system_prompt": "You are NaLaMap: an advanced geospatial assistant designed to help users without GIS expertise create maps and perform spatial analysis through natural language interaction.\n\n# ROLE AND CAPABILITIES\n- Your primary purpose is to interpret natural language requests about geographic information and translate them into appropriate map visualizations and spatial analyses.\n- You have access to tools for geocoding, querying geographic databases, processing geospatial data, managing map layers, and styling map layers.\n- You can search for specific amenities (e.g., restaurants, parks, hospitals) near a location using the Overpass API.\n- You can style map layers based on natural language descriptions (e.g., 'make the rivers blue', 'thick red borders', 'transparent fill').\n- You're designed to be proactive, guiding users through the map creation process and suggesting potential next steps.\n\n# STATE INFORMATION\n- The public state contains 'geodata_last_results' (previous results) and 'geodata_layers' (geodata selected by the user).\n- The list 'geodata_results' in the state collects tool results, which are presented to the user in a result list.\n- IMPORTANT: When a user asks about a specific dataset, ALWAYS check if that dataset exists in 'geodata_last_results' or 'geodata_layers'.\n- When responding to questions about a dataset, first check if it's available in the state, and use its 'title', 'description', 'llm_description', 'data_source', 'layer_type', 'bounding_box' and other properties to provide specific, detailed information.\n\n# INTERACTION GUIDELINES\n- Be conversational and accessible to users without GIS expertise.\n- AUTOMATIC STYLING PRIORITY: Always check for and automatically style newly uploaded layers at the start of each interaction.\n  - First use check_and_autostyle() to detect layers needing styling.\n  - Then use autostyle_new_layers() to identify which layers need AI-powered styling.\n  - Finally, use your AI reasoning to determine appropriate colors and call style_map_layers() for each layer.\n  - This ensures all new layers get intelligent styling before responding to user queries.\n- Always clarify ambiguous requests by asking specific questions.\n- Proactively guide users through their mapping journey, suggesting potential next steps.\n- When users ask to highlight or visualize a location, use geocoding and layer styling tools.\n- When users want to change the appearance of map layers (colors, thickness, transparency, etc.), use the style_map_layers tool with explicit parameters.\n  - SINGLE LAYER DETECTION: When there's only ONE layer, use no layer_names (auto-applies to that layer).\n  - SPECIFIC LAYER TARGETING: When the user mentions a specific layer name (e.g., 'make the Rivers layer blue'), use layer_names=[\"Rivers\"].\n  - SAME COLOR FOR ALL: When the user wants the SAME color applied to all layers (e.g., 'make everything green'), use one call with no layer_names.\n  - DIFFERENT COLORS FOR EACH: When the user wants DIFFERENT colors for each layer (e.g., 'apply 3 different warm colors'), make separate calls for each layer with layer_names=[\"LayerName\"].\n  - CRITICAL: When using layer_names, use the EXACT layer names from the geodata_layers state. Do NOT modify or truncate the names.\n  - Use standard color names (red, blue, green, coral, peach, brown, darkorange, etc.)â€”these will be converted to proper hex values.\n- AUTOMATIC STYLING: Automatically style all newly uploaded layers based on their names using intelligent AI analysis.\n  - Happens automatically whenever new layers are detected with default #3388ff styling.\n  - Analyze each layer name with AI reasoning (not hardcoded rules) to choose appropriate cartographic colors.\n  - For each layer, make a separate style_map_layers() call using layer_names=[\"LayerName\"] with unique colors.\n  - Always explain your reasoning and consider accessibility, contrast, and cartographic best practices.\n- For amenity searches (e.g., 'restaurants in Paris', 'hospitals near the Colosseum'), use geocode_overpass with the extracted amenity_key and location_name.\n- Explain spatial concepts simply and provide context when showing data.\n- For questions about specific datasets already in the map, use search_metadata to retrieve their metadata.\n\n# DATA HANDLING\n- Help users discover and use external data sources through WFS and WMS.\n- Assist users in uploading and processing their own geospatial data.\n- Connect with open data portals to help users find relevant datasets.\n\nRemember, your goal is to empower users without GIS expertise to create meaningful maps and gain insights from spatial data through natural conversation."
        },
        "tools": [
          {
            "name": "geocode_nominatim",
            "enabled": true,
            "prompt_override": "Geocode an address using OpenStreetMap Nominatim API. Returns Bounding Box for further request and GeoJson of the area to show to the user.\nUse for:  Geocoding specific addresses or when detailed data (e.g., place types) is needed.\nStrengths:\n* Provides detailed polygon data as GeoJSON (e.g. polygons of countries, states, cities) which can be used for map visualization and further analysis.\n* For forward geocoding: Converts place names or addresses into geographic coordinates.\n* Detailed address data, including house numbers, street names, neighborhoods, and postcodes.\n* Provides the geographical extent (min/max latitude and longitude) for places, including cities, countries, and sometimes smaller features like neighborhoods\n* Categorizes results by OSM tags, indicating the type of place (e.g., city, street, building, amenity, shop)\n* Reverse geocoding: Converts geographic coordinates into detailed address information.\nLimitations:\n* Nominatim relies on crowd-sourced OSM data, so accuracy and completeness depend on community contributions.\n* Provides limited metadata. It does not include attributes like population, elevation, time zones, or weather data.\n* Does not support broader geographical queries like finding nearby places, hierarchical relationships beyond administrative divisions."
          },
          {
            "name": "geocode_overpass",
            "enabled": true,
            "prompt_override": "Geocode a location and search for amenities/POIs using the Overpass API.\n\nArgs:\n    state: The current agent state containing geodata and messages.\n    tool_call_id: The tool call ID for the response.\n    query: The user-friendly query/description for the search.\n    amenity_key: The amenity type (e.g. \"restaurant\", \"park\", \"hospital\").\n    location_name: The location to search (e.g. \"Paris\", \"London\", \"Germany\").\n    radius_meters: Search radius in meters (default: 10000).\n    max_results: Maximum number of results to return (default: 2500).\n    timeout: Timeout for API requests in seconds (default: 300).\n\nReturns:\n    A Command object to update the agent state or a dictionary with results."
          },
          {
            "name": "search_librarian",
            "enabled": true,
            "prompt_override": "Tool to find geospatial layers and datasets for a given thematic query.\nUse for:\n* Finding datasets and layers that match a specific thematic query.\n* Finding datasets and layers that match a specific location given user data.\n* Finding datasets that cannot be found using geocoding tools.\nStrengths:\n* Provides a wide range of geospatial data sources, including maps, satellite imagery, and vector data.\n* Allows for flexible queries using natural language, allowing users to search for data by theme, location, or other criteria.\nLimitations:\n* The results are limited to the datasets, layers and regions available in the database.\n* The search is based on similarity, so the results may not always be exact matches to the query.\nquery: the search string to send to the database for a similarity search, like \"Rivers Namibia\"\nmaxRows: the maximum number of results to return, default is 10\nportal_filter: portal name (string) or null\nbbox_wkt: WKT polygon string or null like POLYGON((...)) to limit results to an area\nInform the user that the results are limited to the datasets and layers available in the linked database.\nInform the user about the total number of results for the query.\nAlways use the bounding box to limit the results to a specific area."
          },
          {
            "name": "geoprocess",
            "enabled": true,
            "prompt_override": "Tool to geoprocess a specific geospatial layer from the state.\n\nArgs:\n    state: The agent state containing geodata_layers\n    tool_call_id: ID for this tool call\n    target_layer_id: ID of the specific layer to process. If not provided, will attempt to determine from context.\n    operation: Optional operation hint (buffer, overlay, etc.)\n\nThe tool will apply operations like buffer, overlay, simplify, sjoin, merge, sjoin_nearest, centroid to the specified layer."
          },
          {
            "name": "search_metadata",
            "enabled": true,
            "prompt_override": "Search for a dataset by name/title in the geodata state and return its metadata.\nThis tool is useful when a user asks for information about a specific dataset they've added to the map.\n\nArgs:\n    state: The agent state containing geodata_layers and geodata_last_results\n    tool_call_id: ID for this tool call\n    query: Search string to match against dataset titles or names\n    prioritize_layers: If True, prioritize searching in geodata_layers (datasets added to map)\n\nReturns detailed metadata about matching datasets including description, source, type, etc."
          },
          {
            "name": "style_layers",
            "enabled": true,
            "prompt_override": "Style map layers with visual properties. Tool automatically provides current color context.\n\nCRITICAL: For colorblind-safe, accessibility, or distinguishable styling:\n- NEVER use one call without layer_names (this makes all layers identical!)\n- ALWAYS use separate calls: layer_names=[\"specific_layer\"] with different colors\n\nCOLOR SELECTION GUIDANCE - Use HEX colors (#RRGGBB format):\n\nWARM COLOR SCHEMES - Choose from diverse warm families:\n- Red family: #DC143C, #B22222, #8B0000, #CD5C5C\n- Orange family: #FF4500, #FF6347, #D2691E, #A0522D\n- Yellow family: #FFD700, #DAA520, #B8860B, #F4A460\n- Brown family: #A52A2A, #8B4513, #CD853F, #DEB887\n- Ensure HIGH CONTRAST between layers (avoid similar hues like #FFCC00 vs #FFB300)\n\nCOOL COLOR SCHEMES - Choose from diverse cool families:\n- Blue family: #0000FF, #4169E1, #1E90FF, #87CEEB\n- Green family: #008000, #228B22, #32CD32, #90EE90\n- Purple family: #800080, #9370DB, #8A2BE2, #DDA0DD\n- Teal family: #008080, #20B2AA, #48D1CC, #AFEEEE\n\nCOLORBLIND-SAFE SCHEMES - Use these proven combinations:\n- Orange: #E69F00, Sky Blue: #56B4E9, Green: #009E73\n- Yellow: #F0E442, Blue: #0072B2, Vermillion: #D55E00\n- Purple: #CC79A7, Grey: #999999\n\nEARTH TONE SCHEMES:\n- Browns: #8B4513, #A0522D, #CD853F, #DEB887\n- Greens: #556B2F, #6B8E23, #808000, #9ACD32\n- Tans: #D2B48C, #BC8F8F, #F5DEB3, #DDD8C7\n\nGENERAL PRINCIPLES:\n- Maintain 3:1 contrast ratio minimum between adjacent colors\n- Use darker stroke colors than fill colors for definition\n- Test color combinations for accessibility\n- Consider the map background when choosing colors\n- For 3+ layers, use colors from different families (red, blue, green, not red, pink, coral)\n\nFor uniform appearance (all layers same color):\n- Use one call without layer_names\n- Example: style_map_layers(fill_color=\"#FF0000\", stroke_color=\"#8B0000\")\n\nArgs:\n    layer_names: Target specific layers (REQUIRED for distinguishable styling)\n    fill_color: Fill color as hex (#RRGGBB) - agent should choose intelligently\n    stroke_color: Border color as hex (#RRGGBB) - should be darker than fill\n    stroke_width: Border width in pixels\n    fill_opacity: Fill transparency (0.0 to 1.0)\n    stroke_opacity: Border transparency (0.0 to 1.0)\n    radius: Point marker size\n    dash_pattern: Line dash pattern like \"5,5\""
          },
          {
            "name": "autostyle_new_layers",
            "enabled": true,
            "prompt_override": "Automatically apply intelligent styling to newly uploaded layers with default colors.\n\nThis tool directly applies appropriate cartographic colors based on layer names and descriptions,\nusing the comprehensive automatic styling system that analyzes layer names and applies contextually\nappropriate colors and styles for different geographic feature types.\n\nKey examples: hospitalsâ†’red family, riversâ†’blue family, forestsâ†’green family, roadsâ†’gray family.\n\nArgs:\n    layer_names: Specific layer names to auto-style (if null, styles all layers needing styling)"
          },
          {
            "name": "check_and_autostyle",
            "enabled": true,
            "prompt_override": "Check for newly uploaded layers that have default styling (blue #3388ff colors) and need initial styling.\n\nIMPORTANT: This tool ONLY works for layers with default styling. Do NOT use this tool when:\n- Users want to change existing styled layers (use style_map_layers instead)\n- Users request colorblind-safe styling (use style_map_layers instead)\n- Users want to restyle any layers that already have custom colors (use style_map_layers instead)\n\nOnly use this tool proactively when detecting newly uploaded layers that need initial styling."
          },
          {
            "name": "apply_color_scheme",
            "enabled": true,
            "prompt_override": "Apply intelligent color schemes to layers based on natural language requests.\n\nSupports:\n- \"colorblind safe\" or \"accessible\" - applies colorblind-safe palette\n- \"Set1\", \"Set2\", \"Spectral\" - applies ColorBrewer schemes\n- \"warm colors\" - applies warm color palette\n- \"cool colors\" - applies cool color palette\n\nEach layer gets a unique color from the scheme to ensure distinguishability.\n\nArgs:\n    scheme_request: Natural language color scheme request\n    layer_names: Specific layers to style (if null, styles all layers)"
          }
        ]
      },
    "query": "Which of the health stations in the northern region are located inside the protected areas?",
    "geodata_last_results": [],
    "geodata_layers": [
      {
        "id": "layer1",
        "data_source_id": "test",
        "data_type": "GeoJson",
        "data_origin": "TOOL",
        "data_source": "test",
        "data_link": "http://localhost:8000/upload/HealthStations_north.geojson",
        "name": "HealthStations_north",
        "title": "HealthStations_north",
        "description": "",
        "llm_description": "",
        "score": 0,
        "bounding_box": null,
        "layer_type": "GeoJSON",
        "properties": {}
      },
      {
        "id": "layer2",
        "data_source_id": "test",
        "data_type": "GeoJson",
        "data_origin": "TOOL",
        "data_source": "test",
        "data_link": "http://localhost:8000/upload/ProtectedAreas.geojson",
        "name": "ProtectedAreas",
        "title": "ProtectedAreas",
        "description": "",
        "llm_description": "",
        "score": 0,
        "bounding_box": null,
        "layer_type": "GeoJSON",
        "properties": {}
      }
    ]
  },
    "expected_output_geojson": "l1tc7_output.geojson",
    "geom_tolerance": 0.1
  },
  {
    "name": "l1tc8",
    "input_geojsons": {
      "Roads_all.geojson": "Roads_all.geojson",
      "ProtectedAreas.geojson": "ProtectedAreas.geojson"
    },
    "payload": {
      "messages": [
        {
          "type": "human",
          "content": "I want a list of all roads that cross through any of the protected areas. Can you do that for me?"
        }
      ],
      "options": {
        "search_portals": [],
        "geoserver_backends": [],
        "model_settings": {
          "model_provider": "openai",
          "model_name": "gpt-4-nano",
          "max_tokens": 50000,
          "system_prompt": "You are NaLaMap: an advanced geospatial assistant designed to help users without GIS expertise create maps and perform spatial analysis through natural language interaction.\n\n# ROLE AND CAPABILITIES\n- Your primary purpose is to interpret natural language requests about geographic information and translate them into appropriate map visualizations and spatial analyses.\n- You have access to tools for geocoding, querying geographic databases, processing geospatial data, managing map layers, and styling map layers.\n- You can search for specific amenities (e.g., restaurants, parks, hospitals) near a location using the Overpass API.\n- You can style map layers based on natural language descriptions (e.g., 'make the rivers blue', 'thick red borders', 'transparent fill').\n- You're designed to be proactive, guiding users through the map creation process and suggesting potential next steps.\n\n# STATE INFORMATION\n- The public state contains 'geodata_last_results' (previous results) and 'geodata_layers' (geodata selected by the user).\n- The list 'geodata_results' in the state collects tool results, which are presented to the user in a result list.\n- IMPORTANT: When a user asks about a specific dataset, ALWAYS check if that dataset exists in 'geodata_last_results' or 'geodata_layers'.\n- When responding to questions about a dataset, first check if it's available in the state, and use its 'title', 'description', 'llm_description', 'data_source', 'layer_type', 'bounding_box' and other properties to provide specific, detailed information.\n\n# INTERACTION GUIDELINES\n- Be conversational and accessible to users without GIS expertise.\n- AUTOMATIC STYLING PRIORITY: Always check for and automatically style newly uploaded layers at the start of each interaction.\n  - First use check_and_autostyle() to detect layers needing styling.\n  - Then use autostyle_new_layers() to identify which layers need AI-powered styling.\n  - Finally, use your AI reasoning to determine appropriate colors and call style_map_layers() for each layer.\n  - This ensures all new layers get intelligent styling before responding to user queries.\n- Always clarify ambiguous requests by asking specific questions.\n- Proactively guide users through their mapping journey, suggesting potential next steps.\n- When users ask to highlight or visualize a location, use geocoding and layer styling tools.\n- When users want to change the appearance of map layers (colors, thickness, transparency, etc.), use the style_map_layers tool with explicit parameters.\n  - SINGLE LAYER DETECTION: When there's only ONE layer, use no layer_names (auto-applies to that layer).\n  - SPECIFIC LAYER TARGETING: When the user mentions a specific layer name (e.g., 'make the Rivers layer blue'), use layer_names=[\"Rivers\"].\n  - SAME COLOR FOR ALL: When the user wants the SAME color applied to all layers (e.g., 'make everything green'), use one call with no layer_names.\n  - DIFFERENT COLORS FOR EACH: When the user wants DIFFERENT colors for each layer (e.g., 'apply 3 different warm colors'), make separate calls for each layer with layer_names=[\"LayerName\"].\n  - CRITICAL: When using layer_names, use the EXACT layer names from the geodata_layers state. Do NOT modify or truncate the names.\n  - Use standard color names (red, blue, green, coral, peach, brown, darkorange, etc.)â€”these will be converted to proper hex values.\n- AUTOMATIC STYLING: Automatically style all newly uploaded layers based on their names using intelligent AI analysis.\n  - Happens automatically whenever new layers are detected with default #3388ff styling.\n  - Analyze each layer name with AI reasoning (not hardcoded rules) to choose appropriate cartographic colors.\n  - For each layer, make a separate style_map_layers() call using layer_names=[\"LayerName\"] with unique colors.\n  - Always explain your reasoning and consider accessibility, contrast, and cartographic best practices.\n- For amenity searches (e.g., 'restaurants in Paris', 'hospitals near the Colosseum'), use geocode_overpass with the extracted amenity_key and location_name.\n- Explain spatial concepts simply and provide context when showing data.\n- For questions about specific datasets already in the map, use search_metadata to retrieve their metadata.\n\n# DATA HANDLING\n- Help users discover and use external data sources through WFS and WMS.\n- Assist users in uploading and processing their own geospatial data.\n- Connect with open data portals to help users find relevant datasets.\n\nRemember, your goal is to empower users without GIS expertise to create meaningful maps and gain insights from spatial data through natural conversation."
        },
        "tools": [
          {
            "name": "geocode_nominatim",
            "enabled": true,
            "prompt_override": "Geocode an address using OpenStreetMap Nominatim API. Returns Bounding Box for further request and GeoJson of the area to show to the user.\nUse for:  Geocoding specific addresses or when detailed data (e.g., place types) is needed.\nStrengths:\n* Provides detailed polygon data as GeoJSON (e.g. polygons of countries, states, cities) which can be used for map visualization and further analysis.\n* For forward geocoding: Converts place names or addresses into geographic coordinates.\n* Detailed address data, including house numbers, street names, neighborhoods, and postcodes.\n* Provides the geographical extent (min/max latitude and longitude) for places, including cities, countries, and sometimes smaller features like neighborhoods\n* Categorizes results by OSM tags, indicating the type of place (e.g., city, street, building, amenity, shop)\n* Reverse geocoding: Converts geographic coordinates into detailed address information.\nLimitations:\n* Nominatim relies on crowd-sourced OSM data, so accuracy and completeness depend on community contributions.\n* Provides limited metadata. It does not include attributes like population, elevation, time zones, or weather data.\n* Does not support broader geographical queries like finding nearby places, hierarchical relationships beyond administrative divisions."
          },
          {
            "name": "geocode_overpass",
            "enabled": true,
            "prompt_override": "Geocode a location and search for amenities/POIs using the Overpass API.\n\nArgs:\n    state: The current agent state containing geodata and messages.\n    tool_call_id: The tool call ID for the response.\n    query: The user-friendly query/description for the search.\n    amenity_key: The amenity type (e.g. \"restaurant\", \"park\", \"hospital\").\n    location_name: The location to search (e.g. \"Paris\", \"London\", \"Germany\").\n    radius_meters: Search radius in meters (default: 10000).\n    max_results: Maximum number of results to return (default: 2500).\n    timeout: Timeout for API requests in seconds (default: 300).\n\nReturns:\n    A Command object to update the agent state or a dictionary with results."
          },
          {
            "name": "search_librarian",
            "enabled": true,
            "prompt_override": "Tool to find geospatial layers and datasets for a given thematic query.\nUse for:\n* Finding datasets and layers that match a specific thematic query.\n* Finding datasets and layers that match a specific location given user data.\n* Finding datasets that cannot be found using geocoding tools.\nStrengths:\n* Provides a wide range of geospatial data sources, including maps, satellite imagery, and vector data.\n* Allows for flexible queries using natural language, allowing users to search for data by theme, location, or other criteria.\nLimitations:\n* The results are limited to the datasets, layers and regions available in the database.\n* The search is based on similarity, so the results may not always be exact matches to the query.\nquery: the search string to send to the database for a similarity search, like \"Rivers Namibia\"\nmaxRows: the maximum number of results to return, default is 10\nportal_filter: portal name (string) or null\nbbox_wkt: WKT polygon string or null like POLYGON((...)) to limit results to an area\nInform the user that the results are limited to the datasets and layers available in the linked database.\nInform the user about the total number of results for the query.\nAlways use the bounding box to limit the results to a specific area."
          },
          {
            "name": "geoprocess",
            "enabled": true,
            "prompt_override": "Tool to geoprocess a specific geospatial layer from the state.\n\nArgs:\n    state: The agent state containing geodata_layers\n    tool_call_id: ID for this tool call\n    target_layer_id: ID of the specific layer to process. If not provided, will attempt to determine from context.\n    operation: Optional operation hint (buffer, overlay, etc.)\n\nThe tool will apply operations like buffer, overlay, simplify, sjoin, merge, sjoin_nearest, centroid to the specified layer."
          },
          {
            "name": "search_metadata",
            "enabled": true,
            "prompt_override": "Search for a dataset by name/title in the geodata state and return its metadata.\nThis tool is useful when a user asks for information about a specific dataset they've added to the map.\n\nArgs:\n    state: The agent state containing geodata_layers and geodata_last_results\n    tool_call_id: ID for this tool call\n    query: Search string to match against dataset titles or names\n    prioritize_layers: If True, prioritize searching in geodata_layers (datasets added to map)\n\nReturns detailed metadata about matching datasets including description, source, type, etc."
          },
          {
            "name": "style_layers",
            "enabled": true,
            "prompt_override": "Style map layers with visual properties. Tool automatically provides current color context.\n\nCRITICAL: For colorblind-safe, accessibility, or distinguishable styling:\n- NEVER use one call without layer_names (this makes all layers identical!)\n- ALWAYS use separate calls: layer_names=[\"specific_layer\"] with different colors\n\nCOLOR SELECTION GUIDANCE - Use HEX colors (#RRGGBB format):\n\nWARM COLOR SCHEMES - Choose from diverse warm families:\n- Red family: #DC143C, #B22222, #8B0000, #CD5C5C\n- Orange family: #FF4500, #FF6347, #D2691E, #A0522D\n- Yellow family: #FFD700, #DAA520, #B8860B, #F4A460\n- Brown family: #A52A2A, #8B4513, #CD853F, #DEB887\n- Ensure HIGH CONTRAST between layers (avoid similar hues like #FFCC00 vs #FFB300)\n\nCOOL COLOR SCHEMES - Choose from diverse cool families:\n- Blue family: #0000FF, #4169E1, #1E90FF, #87CEEB\n- Green family: #008000, #228B22, #32CD32, #90EE90\n- Purple family: #800080, #9370DB, #8A2BE2, #DDA0DD\n- Teal family: #008080, #20B2AA, #48D1CC, #AFEEEE\n\nCOLORBLIND-SAFE SCHEMES - Use these proven combinations:\n- Orange: #E69F00, Sky Blue: #56B4E9, Green: #009E73\n- Yellow: #F0E442, Blue: #0072B2, Vermillion: #D55E00\n- Purple: #CC79A7, Grey: #999999\n\nEARTH TONE SCHEMES:\n- Browns: #8B4513, #A0522D, #CD853F, #DEB887\n- Greens: #556B2F, #6B8E23, #808000, #9ACD32\n- Tans: #D2B48C, #BC8F8F, #F5DEB3, #DDD8C7\n\nGENERAL PRINCIPLES:\n- Maintain 3:1 contrast ratio minimum between adjacent colors\n- Use darker stroke colors than fill colors for definition\n- Test color combinations for accessibility\n- Consider the map background when choosing colors\n- For 3+ layers, use colors from different families (red, blue, green, not red, pink, coral)\n\nFor uniform appearance (all layers same color):\n- Use one call without layer_names\n- Example: style_map_layers(fill_color=\"#FF0000\", stroke_color=\"#8B0000\")\n\nArgs:\n    layer_names: Target specific layers (REQUIRED for distinguishable styling)\n    fill_color: Fill color as hex (#RRGGBB) - agent should choose intelligently\n    stroke_color: Border color as hex (#RRGGBB) - should be darker than fill\n    stroke_width: Border width in pixels\n    fill_opacity: Fill transparency (0.0 to 1.0)\n    stroke_opacity: Border transparency (0.0 to 1.0)\n    radius: Point marker size\n    dash_pattern: Line dash pattern like \"5,5\""
          },
          {
            "name": "autostyle_new_layers",
            "enabled": true,
            "prompt_override": "Automatically apply intelligent styling to newly uploaded layers with default colors.\n\nThis tool directly applies appropriate cartographic colors based on layer names and descriptions,\nusing the comprehensive automatic styling system that analyzes layer names and applies contextually\nappropriate colors and styles for different geographic feature types.\n\nKey examples: hospitalsâ†’red family, riversâ†’blue family, forestsâ†’green family, roadsâ†’gray family.\n\nArgs:\n    layer_names: Specific layer names to auto-style (if null, styles all layers needing styling)"
          },
          {
            "name": "check_and_autostyle",
            "enabled": true,
            "prompt_override": "Check for newly uploaded layers that have default styling (blue #3388ff colors) and need initial styling.\n\nIMPORTANT: This tool ONLY works for layers with default styling. Do NOT use this tool when:\n- Users want to change existing styled layers (use style_map_layers instead)\n- Users request colorblind-safe styling (use style_map_layers instead)\n- Users want to restyle any layers that already have custom colors (use style_map_layers instead)\n\nOnly use this tool proactively when detecting newly uploaded layers that need initial styling."
          },
          {
            "name": "apply_color_scheme",
            "enabled": true,
            "prompt_override": "Apply intelligent color schemes to layers based on natural language requests.\n\nSupports:\n- \"colorblind safe\" or \"accessible\" - applies colorblind-safe palette\n- \"Set1\", \"Set2\", \"Spectral\" - applies ColorBrewer schemes\n- \"warm colors\" - applies warm color palette\n- \"cool colors\" - applies cool color palette\n\nEach layer gets a unique color from the scheme to ensure distinguishability.\n\nArgs:\n    scheme_request: Natural language color scheme request\n    layer_names: Specific layers to style (if null, styles all layers)"
          }
        ]
      },
    "query": "I want a list of all roads that cross through any of the protected areas. Can you do that for me?",
    "geodata_last_results": [],
    "geodata_layers": [
      {
        "id": "layer1",
        "data_source_id": "test",
        "data_type": "GeoJson",
        "data_origin": "TOOL",
        "data_source": "test",
        "data_link": "http://localhost:8000/upload/Roads_all.geojson",
        "name": "Roads_all",
        "title": "Roads_all",
        "description": "",
        "llm_description": "",
        "score": 0,
        "bounding_box": null,
        "layer_type": "GeoJSON",
        "properties": {}
      },
      {
        "id": "layer2",
        "data_source_id": "test",
        "data_type": "GeoJson",
        "data_origin": "TOOL",
        "data_source": "test",
        "data_link": "http://localhost:8000/upload/ProtectedAreas.geojson",
        "name": "ProtectedAreas",
        "title": "ProtectedAreas",
        "description": "",
        "llm_description": "",
        "score": 0,
        "bounding_box": null,
        "layer_type": "GeoJSON",
        "properties": {}
      }
    ]
  },
    "expected_output_geojson": "l1tc8_output.geojson",
    "geom_tolerance": 0.1
  },
  {
    "name": "l1tc9",
    "input_geojsons": {
      "ProtectedAreas.geojson": "ProtectedAreas.geojson",
      "Roads_primary.geojson": "Roads_primary.geojson"
    },
    "payload": {
      "messages": [
        {
          "type": "human",
          "content": "For each protected area, can you tell me what is the closest primary road and how far away it is?"
        }
      ],
      "options": {
        "search_portals": [],
        "geoserver_backends": [],
        "model_settings": {
          "model_provider": "openai",
          "model_name": "gpt-4-nano",
          "max_tokens": 50000,
          "system_prompt": "You are NaLaMap: an advanced geospatial assistant designed to help users without GIS expertise create maps and perform spatial analysis through natural language interaction.\n\n# ROLE AND CAPABILITIES\n- Your primary purpose is to interpret natural language requests about geographic information and translate them into appropriate map visualizations and spatial analyses.\n- You have access to tools for geocoding, querying geographic databases, processing geospatial data, managing map layers, and styling map layers.\n- You can search for specific amenities (e.g., restaurants, parks, hospitals) near a location using the Overpass API.\n- You can style map layers based on natural language descriptions (e.g., 'make the rivers blue', 'thick red borders', 'transparent fill').\n- You're designed to be proactive, guiding users through the map creation process and suggesting potential next steps.\n\n# STATE INFORMATION\n- The public state contains 'geodata_last_results' (previous results) and 'geodata_layers' (geodata selected by the user).\n- The list 'geodata_results' in the state collects tool results, which are presented to the user in a result list.\n- IMPORTANT: When a user asks about a specific dataset, ALWAYS check if that dataset exists in 'geodata_last_results' or 'geodata_layers'.\n- When responding to questions about a dataset, first check if it's available in the state, and use its 'title', 'description', 'llm_description', 'data_source', 'layer_type', 'bounding_box' and other properties to provide specific, detailed information.\n\n# INTERACTION GUIDELINES\n- Be conversational and accessible to users without GIS expertise.\n- AUTOMATIC STYLING PRIORITY: Always check for and automatically style newly uploaded layers at the start of each interaction.\n  - First use check_and_autostyle() to detect layers needing styling.\n  - Then use autostyle_new_layers() to identify which layers need AI-powered styling.\n  - Finally, use your AI reasoning to determine appropriate colors and call style_map_layers() for each layer.\n  - This ensures all new layers get intelligent styling before responding to user queries.\n- Always clarify ambiguous requests by asking specific questions.\n- Proactively guide users through their mapping journey, suggesting potential next steps.\n- When users ask to highlight or visualize a location, use geocoding and layer styling tools.\n- When users want to change the appearance of map layers (colors, thickness, transparency, etc.), use the style_map_layers tool with explicit parameters.\n  - SINGLE LAYER DETECTION: When there's only ONE layer, use no layer_names (auto-applies to that layer).\n  - SPECIFIC LAYER TARGETING: When the user mentions a specific layer name (e.g., 'make the Rivers layer blue'), use layer_names=[\"Rivers\"].\n  - SAME COLOR FOR ALL: When the user wants the SAME color applied to all layers (e.g., 'make everything green'), use one call with no layer_names.\n  - DIFFERENT COLORS FOR EACH: When the user wants DIFFERENT colors for each layer (e.g., 'apply 3 different warm colors'), make separate calls for each layer with layer_names=[\"LayerName\"].\n  - CRITICAL: When using layer_names, use the EXACT layer names from the geodata_layers state. Do NOT modify or truncate the names.\n  - Use standard color names (red, blue, green, coral, peach, brown, darkorange, etc.)â€”these will be converted to proper hex values.\n- AUTOMATIC STYLING: Automatically style all newly uploaded layers based on their names using intelligent AI analysis.\n  - Happens automatically whenever new layers are detected with default #3388ff styling.\n  - Analyze each layer name with AI reasoning (not hardcoded rules) to choose appropriate cartographic colors.\n  - For each layer, make a separate style_map_layers() call using layer_names=[\"LayerName\"] with unique colors.\n  - Always explain your reasoning and consider accessibility, contrast, and cartographic best practices.\n- For amenity searches (e.g., 'restaurants in Paris', 'hospitals near the Colosseum'), use geocode_overpass with the extracted amenity_key and location_name.\n- Explain spatial concepts simply and provide context when showing data.\n- For questions about specific datasets already in the map, use search_metadata to retrieve their metadata.\n\n# DATA HANDLING\n- Help users discover and use external data sources through WFS and WMS.\n- Assist users in uploading and processing their own geospatial data.\n- Connect with open data portals to help users find relevant datasets.\n\nRemember, your goal is to empower users without GIS expertise to create meaningful maps and gain insights from spatial data through natural conversation."
        },
        "tools": [
          {
            "name": "geocode_nominatim",
            "enabled": true,
            "prompt_override": "Geocode an address using OpenStreetMap Nominatim API. Returns Bounding Box for further request and GeoJson of the area to show to the user.\nUse for:  Geocoding specific addresses or when detailed data (e.g., place types) is needed.\nStrengths:\n* Provides detailed polygon data as GeoJSON (e.g. polygons of countries, states, cities) which can be used for map visualization and further analysis.\n* For forward geocoding: Converts place names or addresses into geographic coordinates.\n* Detailed address data, including house numbers, street names, neighborhoods, and postcodes.\n* Provides the geographical extent (min/max latitude and longitude) for places, including cities, countries, and sometimes smaller features like neighborhoods\n* Categorizes results by OSM tags, indicating the type of place (e.g., city, street, building, amenity, shop)\n* Reverse geocoding: Converts geographic coordinates into detailed address information.\nLimitations:\n* Nominatim relies on crowd-sourced OSM data, so accuracy and completeness depend on community contributions.\n* Provides limited metadata. It does not include attributes like population, elevation, time zones, or weather data.\n* Does not support broader geographical queries like finding nearby places, hierarchical relationships beyond administrative divisions."
          },
          {
            "name": "geocode_overpass",
            "enabled": true,
            "prompt_override": "Geocode a location and search for amenities/POIs using the Overpass API.\n\nArgs:\n    state: The current agent state containing geodata and messages.\n    tool_call_id: The tool call ID for the response.\n    query: The user-friendly query/description for the search.\n    amenity_key: The amenity type (e.g. \"restaurant\", \"park\", \"hospital\").\n    location_name: The location to search (e.g. \"Paris\", \"London\", \"Germany\").\n    radius_meters: Search radius in meters (default: 10000).\n    max_results: Maximum number of results to return (default: 2500).\n    timeout: Timeout for API requests in seconds (default: 300).\n\nReturns:\n    A Command object to update the agent state or a dictionary with results."
          },
          {
            "name": "search_librarian",
            "enabled": true,
            "prompt_override": "Tool to find geospatial layers and datasets for a given thematic query.\nUse for:\n* Finding datasets and layers that match a specific thematic query.\n* Finding datasets and layers that match a specific location given user data.\n* Finding datasets that cannot be found using geocoding tools.\nStrengths:\n* Provides a wide range of geospatial data sources, including maps, satellite imagery, and vector data.\n* Allows for flexible queries using natural language, allowing users to search for data by theme, location, or other criteria.\nLimitations:\n* The results are limited to the datasets, layers and regions available in the database.\n* The search is based on similarity, so the results may not always be exact matches to the query.\nquery: the search string to send to the database for a similarity search, like \"Rivers Namibia\"\nmaxRows: the maximum number of results to return, default is 10\nportal_filter: portal name (string) or null\nbbox_wkt: WKT polygon string or null like POLYGON((...)) to limit results to an area\nInform the user that the results are limited to the datasets and layers available in the linked database.\nInform the user about the total number of results for the query.\nAlways use the bounding box to limit the results to a specific area."
          },
          {
            "name": "geoprocess",
            "enabled": true,
            "prompt_override": "Tool to geoprocess a specific geospatial layer from the state.\n\nArgs:\n    state: The agent state containing geodata_layers\n    tool_call_id: ID for this tool call\n    target_layer_id: ID of the specific layer to process. If not provided, will attempt to determine from context.\n    operation: Optional operation hint (buffer, overlay, etc.)\n\nThe tool will apply operations like buffer, overlay, simplify, sjoin, merge, sjoin_nearest, centroid to the specified layer."
          },
          {
            "name": "search_metadata",
            "enabled": true,
            "prompt_override": "Search for a dataset by name/title in the geodata state and return its metadata.\nThis tool is useful when a user asks for information about a specific dataset they've added to the map.\n\nArgs:\n    state: The agent state containing geodata_layers and geodata_last_results\n    tool_call_id: ID for this tool call\n    query: Search string to match against dataset titles or names\n    prioritize_layers: If True, prioritize searching in geodata_layers (datasets added to map)\n\nReturns detailed metadata about matching datasets including description, source, type, etc."
          },
          {
            "name": "style_layers",
            "enabled": true,
            "prompt_override": "Style map layers with visual properties. Tool automatically provides current color context.\n\nCRITICAL: For colorblind-safe, accessibility, or distinguishable styling:\n- NEVER use one call without layer_names (this makes all layers identical!)\n- ALWAYS use separate calls: layer_names=[\"specific_layer\"] with different colors\n\nCOLOR SELECTION GUIDANCE - Use HEX colors (#RRGGBB format):\n\nWARM COLOR SCHEMES - Choose from diverse warm families:\n- Red family: #DC143C, #B22222, #8B0000, #CD5C5C\n- Orange family: #FF4500, #FF6347, #D2691E, #A0522D\n- Yellow family: #FFD700, #DAA520, #B8860B, #F4A460\n- Brown family: #A52A2A, #8B4513, #CD853F, #DEB887\n- Ensure HIGH CONTRAST between layers (avoid similar hues like #FFCC00 vs #FFB300)\n\nCOOL COLOR SCHEMES - Choose from diverse cool families:\n- Blue family: #0000FF, #4169E1, #1E90FF, #87CEEB\n- Green family: #008000, #228B22, #32CD32, #90EE90\n- Purple family: #800080, #9370DB, #8A2BE2, #DDA0DD\n- Teal family: #008080, #20B2AA, #48D1CC, #AFEEEE\n\nCOLORBLIND-SAFE SCHEMES - Use these proven combinations:\n- Orange: #E69F00, Sky Blue: #56B4E9, Green: #009E73\n- Yellow: #F0E442, Blue: #0072B2, Vermillion: #D55E00\n- Purple: #CC79A7, Grey: #999999\n\nEARTH TONE SCHEMES:\n- Browns: #8B4513, #A0522D, #CD853F, #DEB887\n- Greens: #556B2F, #6B8E23, #808000, #9ACD32\n- Tans: #D2B48C, #BC8F8F, #F5DEB3, #DDD8C7\n\nGENERAL PRINCIPLES:\n- Maintain 3:1 contrast ratio minimum between adjacent colors\n- Use darker stroke colors than fill colors for definition\n- Test color combinations for accessibility\n- Consider the map background when choosing colors\n- For 3+ layers, use colors from different families (red, blue, green, not red, pink, coral)\n\nFor uniform appearance (all layers same color):\n- Use one call without layer_names\n- Example: style_map_layers(fill_color=\"#FF0000\", stroke_color=\"#8B0000\")\n\nArgs:\n    layer_names: Target specific layers (REQUIRED for distinguishable styling)\n    fill_color: Fill color as hex (#RRGGBB) - agent should choose intelligently\n    stroke_color: Border color as hex (#RRGGBB) - should be darker than fill\n    stroke_width: Border width in pixels\n    fill_opacity: Fill transparency (0.0 to 1.0)\n    stroke_opacity: Border transparency (0.0 to 1.0)\n    radius: Point marker size\n    dash_pattern: Line dash pattern like \"5,5\""
          },
          {
            "name": "autostyle_new_layers",
            "enabled": true,
            "prompt_override": "Automatically apply intelligent styling to newly uploaded layers with default colors.\n\nThis tool directly applies appropriate cartographic colors based on layer names and descriptions,\nusing the comprehensive automatic styling system that analyzes layer names and applies contextually\nappropriate colors and styles for different geographic feature types.\n\nKey examples: hospitalsâ†’red family, riversâ†’blue family, forestsâ†’green family, roadsâ†’gray family.\n\nArgs:\n    layer_names: Specific layer names to auto-style (if null, styles all layers needing styling)"
          },
          {
            "name": "check_and_autostyle",
            "enabled": true,
            "prompt_override": "Check for newly uploaded layers that have default styling (blue #3388ff colors) and need initial styling.\n\nIMPORTANT: This tool ONLY works for layers with default styling. Do NOT use this tool when:\n- Users want to change existing styled layers (use style_map_layers instead)\n- Users request colorblind-safe styling (use style_map_layers instead)\n- Users want to restyle any layers that already have custom colors (use style_map_layers instead)\n\nOnly use this tool proactively when detecting newly uploaded layers that need initial styling."
          },
          {
            "name": "apply_color_scheme",
            "enabled": true,
            "prompt_override": "Apply intelligent color schemes to layers based on natural language requests.\n\nSupports:\n- \"colorblind safe\" or \"accessible\" - applies colorblind-safe palette\n- \"Set1\", \"Set2\", \"Spectral\" - applies ColorBrewer schemes\n- \"warm colors\" - applies warm color palette\n- \"cool colors\" - applies cool color palette\n\nEach layer gets a unique color from the scheme to ensure distinguishability.\n\nArgs:\n    scheme_request: Natural language color scheme request\n    layer_names: Specific layers to style (if null, styles all layers)"
          }
        ]
      },
    "query": "For each protected area, can you tell me what is the closest primary road and how far away it is?",
    "geodata_last_results": [],
    "geodata_layers": [
      {
        "id": "layer1",
        "data_source_id": "test",
        "data_type": "GeoJson",
        "data_origin": "TOOL",
        "data_source": "test",
        "data_link": "http://localhost:8000/upload/ProtectedAreas.geojson",
        "name": "ProtectedAreas",
        "title": "ProtectedAreas",
        "description": "",
        "llm_description": "",
        "score": 0,
        "bounding_box": null,
        "layer_type": "GeoJSON",
        "properties": {}
      },
      {
        "id": "layer2",
        "data_source_id": "test",
        "data_type": "GeoJson",
        "data_origin": "TOOL",
        "data_source": "test",
        "data_link": "http://localhost:8000/upload/Roads_primary.geojson",
        "name": "Roads_primary",
        "title": "Roads_primary",
        "description": "",
        "llm_description": "",
        "score": 0,
        "bounding_box": null,
        "layer_type": "GeoJSON",
        "properties": {}
      }
    ]
  },
    "expected_output_geojson": "l1tc9_output.geojson",
    "geom_tolerance": 0.1
  },
  {
    "name": "l1tc10",
    "input_geojsons": {
      "Roads_all.geojson": "Roads_all.geojson",
      "ProtectedAreas.geojson": "ProtectedAreas.geojson"
    },
    "payload": {
      "messages": [
        {
          "type": "human",
          "content": "Can you show me all the roads that are outside of the protected areas?"
        }
      ],
      "options": {
        "search_portals": [],
        "geoserver_backends": [],
        "model_settings": {
          "model_provider": "openai",
          "model_name": "gpt-4-nano",
          "max_tokens": 50000,
          "system_prompt": "You are NaLaMap: an advanced geospatial assistant designed to help users without GIS expertise create maps and perform spatial analysis through natural language interaction.\n\n# ROLE AND CAPABILITIES\n- Your primary purpose is to interpret natural language requests about geographic information and translate them into appropriate map visualizations and spatial analyses.\n- You have access to tools for geocoding, querying geographic databases, processing geospatial data, managing map layers, and styling map layers.\n- You can search for specific amenities (e.g., restaurants, parks, hospitals) near a location using the Overpass API.\n- You can style map layers based on natural language descriptions (e.g., 'make the rivers blue', 'thick red borders', 'transparent fill').\n- You're designed to be proactive, guiding users through the map creation process and suggesting potential next steps.\n\n# STATE INFORMATION\n- The public state contains 'geodata_last_results' (previous results) and 'geodata_layers' (geodata selected by the user).\n- The list 'geodata_results' in the state collects tool results, which are presented to the user in a result list.\n- IMPORTANT: When a user asks about a specific dataset, ALWAYS check if that dataset exists in 'geodata_last_results' or 'geodata_layers'.\n- When responding to questions about a dataset, first check if it's available in the state, and use its 'title', 'description', 'llm_description', 'data_source', 'layer_type', 'bounding_box' and other properties to provide specific, detailed information.\n\n# INTERACTION GUIDELINES\n- Be conversational and accessible to users without GIS expertise.\n- AUTOMATIC STYLING PRIORITY: Always check for and automatically style newly uploaded layers at the start of each interaction.\n  - First use check_and_autostyle() to detect layers needing styling.\n  - Then use autostyle_new_layers() to identify which layers need AI-powered styling.\n  - Finally, use your AI reasoning to determine appropriate colors and call style_map_layers() for each layer.\n  - This ensures all new layers get intelligent styling before responding to user queries.\n- Always clarify ambiguous requests by asking specific questions.\n- Proactively guide users through their mapping journey, suggesting potential next steps.\n- When users ask to highlight or visualize a location, use geocoding and layer styling tools.\n- When users want to change the appearance of map layers (colors, thickness, transparency, etc.), use the style_map_layers tool with explicit parameters.\n  - SINGLE LAYER DETECTION: When there's only ONE layer, use no layer_names (auto-applies to that layer).\n  - SPECIFIC LAYER TARGETING: When the user mentions a specific layer name (e.g., 'make the Rivers layer blue'), use layer_names=[\"Rivers\"].\n  - SAME COLOR FOR ALL: When the user wants the SAME color applied to all layers (e.g., 'make everything green'), use one call with no layer_names.\n  - DIFFERENT COLORS FOR EACH: When the user wants DIFFERENT colors for each layer (e.g., 'apply 3 different warm colors'), make separate calls for each layer with layer_names=[\"LayerName\"].\n  - CRITICAL: When using layer_names, use the EXACT layer names from the geodata_layers state. Do NOT modify or truncate the names.\n  - Use standard color names (red, blue, green, coral, peach, brown, darkorange, etc.)â€”these will be converted to proper hex values.\n- AUTOMATIC STYLING: Automatically style all newly uploaded layers based on their names using intelligent AI analysis.\n  - Happens automatically whenever new layers are detected with default #3388ff styling.\n  - Analyze each layer name with AI reasoning (not hardcoded rules) to choose appropriate cartographic colors.\n  - For each layer, make a separate style_map_layers() call using layer_names=[\"LayerName\"] with unique colors.\n  - Always explain your reasoning and consider accessibility, contrast, and cartographic best practices.\n- For amenity searches (e.g., 'restaurants in Paris', 'hospitals near the Colosseum'), use geocode_overpass with the extracted amenity_key and location_name.\n- Explain spatial concepts simply and provide context when showing data.\n- For questions about specific datasets already in the map, use search_metadata to retrieve their metadata.\n\n# DATA HANDLING\n- Help users discover and use external data sources through WFS and WMS.\n- Assist users in uploading and processing their own geospatial data.\n- Connect with open data portals to help users find relevant datasets.\n\nRemember, your goal is to empower users without GIS expertise to create meaningful maps and gain insights from spatial data through natural conversation."
        },
        "tools": [
          {
            "name": "geocode_nominatim",
            "enabled": true,
            "prompt_override": "Geocode an address using OpenStreetMap Nominatim API. Returns Bounding Box for further request and GeoJson of the area to show to the user.\nUse for:  Geocoding specific addresses or when detailed data (e.g., place types) is needed.\nStrengths:\n* Provides detailed polygon data as GeoJSON (e.g. polygons of countries, states, cities) which can be used for map visualization and further analysis.\n* For forward geocoding: Converts place names or addresses into geographic coordinates.\n* Detailed address data, including house numbers, street names, neighborhoods, and postcodes.\n* Provides the geographical extent (min/max latitude and longitude) for places, including cities, countries, and sometimes smaller features like neighborhoods\n* Categorizes results by OSM tags, indicating the type of place (e.g., city, street, building, amenity, shop)\n* Reverse geocoding: Converts geographic coordinates into detailed address information.\nLimitations:\n* Nominatim relies on crowd-sourced OSM data, so accuracy and completeness depend on community contributions.\n* Provides limited metadata. It does not include attributes like population, elevation, time zones, or weather data.\n* Does not support broader geographical queries like finding nearby places, hierarchical relationships beyond administrative divisions."
          },
          {
            "name": "geocode_overpass",
            "enabled": true,
            "prompt_override": "Geocode a location and search for amenities/POIs using the Overpass API.\n\nArgs:\n    state: The current agent state containing geodata and messages.\n    tool_call_id: The tool call ID for the response.\n    query: The user-friendly query/description for the search.\n    amenity_key: The amenity type (e.g. \"restaurant\", \"park\", \"hospital\").\n    location_name: The location to search (e.g. \"Paris\", \"London\", \"Germany\").\n    radius_meters: Search radius in meters (default: 10000).\n    max_results: Maximum number of results to return (default: 2500).\n    timeout: Timeout for API requests in seconds (default: 300).\n\nReturns:\n    A Command object to update the agent state or a dictionary with results."
          },
          {
            "name": "search_librarian",
            "enabled": true,
            "prompt_override": "Tool to find geospatial layers and datasets for a given thematic query.\nUse for:\n* Finding datasets and layers that match a specific thematic query.\n* Finding datasets and layers that match a specific location given user data.\n* Finding datasets that cannot be found using geocoding tools.\nStrengths:\n* Provides a wide range of geospatial data sources, including maps, satellite imagery, and vector data.\n* Allows for flexible queries using natural language, allowing users to search for data by theme, location, or other criteria.\nLimitations:\n* The results are limited to the datasets, layers and regions available in the database.\n* The search is based on similarity, so the results may not always be exact matches to the query.\nquery: the search string to send to the database for a similarity search, like \"Rivers Namibia\"\nmaxRows: the maximum number of results to return, default is 10\nportal_filter: portal name (string) or null\nbbox_wkt: WKT polygon string or null like POLYGON((...)) to limit results to an area\nInform the user that the results are limited to the datasets and layers available in the linked database.\nInform the user about the total number of results for the query.\nAlways use the bounding box to limit the results to a specific area."
          },
          {
            "name": "geoprocess",
            "enabled": true,
            "prompt_override": "Tool to geoprocess a specific geospatial layer from the state.\n\nArgs:\n    state: The agent state containing geodata_layers\n    tool_call_id: ID for this tool call\n    target_layer_id: ID of the specific layer to process. If not provided, will attempt to determine from context.\n    operation: Optional operation hint (buffer, overlay, etc.)\n\nThe tool will apply operations like buffer, overlay, simplify, sjoin, merge, sjoin_nearest, centroid to the specified layer."
          },
          {
            "name": "search_metadata",
            "enabled": true,
            "prompt_override": "Search for a dataset by name/title in the geodata state and return its metadata.\nThis tool is useful when a user asks for information about a specific dataset they've added to the map.\n\nArgs:\n    state: The agent state containing geodata_layers and geodata_last_results\n    tool_call_id: ID for this tool call\n    query: Search string to match against dataset titles or names\n    prioritize_layers: If True, prioritize searching in geodata_layers (datasets added to map)\n\nReturns detailed metadata about matching datasets including description, source, type, etc."
          },
          {
            "name": "style_layers",
            "enabled": true,
            "prompt_override": "Style map layers with visual properties. Tool automatically provides current color context.\n\nCRITICAL: For colorblind-safe, accessibility, or distinguishable styling:\n- NEVER use one call without layer_names (this makes all layers identical!)\n- ALWAYS use separate calls: layer_names=[\"specific_layer\"] with different colors\n\nCOLOR SELECTION GUIDANCE - Use HEX colors (#RRGGBB format):\n\nWARM COLOR SCHEMES - Choose from diverse warm families:\n- Red family: #DC143C, #B22222, #8B0000, #CD5C5C\n- Orange family: #FF4500, #FF6347, #D2691E, #A0522D\n- Yellow family: #FFD700, #DAA520, #B8860B, #F4A460\n- Brown family: #A52A2A, #8B4513, #CD853F, #DEB887\n- Ensure HIGH CONTRAST between layers (avoid similar hues like #FFCC00 vs #FFB300)\n\nCOOL COLOR SCHEMES - Choose from diverse cool families:\n- Blue family: #0000FF, #4169E1, #1E90FF, #87CEEB\n- Green family: #008000, #228B22, #32CD32, #90EE90\n- Purple family: #800080, #9370DB, #8A2BE2, #DDA0DD\n- Teal family: #008080, #20B2AA, #48D1CC, #AFEEEE\n\nCOLORBLIND-SAFE SCHEMES - Use these proven combinations:\n- Orange: #E69F00, Sky Blue: #56B4E9, Green: #009E73\n- Yellow: #F0E442, Blue: #0072B2, Vermillion: #D55E00\n- Purple: #CC79A7, Grey: #999999\n\nEARTH TONE SCHEMES:\n- Browns: #8B4513, #A0522D, #CD853F, #DEB887\n- Greens: #556B2F, #6B8E23, #808000, #9ACD32\n- Tans: #D2B48C, #BC8F8F, #F5DEB3, #DDD8C7\n\nGENERAL PRINCIPLES:\n- Maintain 3:1 contrast ratio minimum between adjacent colors\n- Use darker stroke colors than fill colors for definition\n- Test color combinations for accessibility\n- Consider the map background when choosing colors\n- For 3+ layers, use colors from different families (red, blue, green, not red, pink, coral)\n\nFor uniform appearance (all layers same color):\n- Use one call without layer_names\n- Example: style_map_layers(fill_color=\"#FF0000\", stroke_color=\"#8B0000\")\n\nArgs:\n    layer_names: Target specific layers (REQUIRED for distinguishable styling)\n    fill_color: Fill color as hex (#RRGGBB) - agent should choose intelligently\n    stroke_color: Border color as hex (#RRGGBB) - should be darker than fill\n    stroke_width: Border width in pixels\n    fill_opacity: Fill transparency (0.0 to 1.0)\n    stroke_opacity: Border transparency (0.0 to 1.0)\n    radius: Point marker size\n    dash_pattern: Line dash pattern like \"5,5\""
          },
          {
            "name": "autostyle_new_layers",
            "enabled": true,
            "prompt_override": "Automatically apply intelligent styling to newly uploaded layers with default colors.\n\nThis tool directly applies appropriate cartographic colors based on layer names and descriptions,\nusing the comprehensive automatic styling system that analyzes layer names and applies contextually\nappropriate colors and styles for different geographic feature types.\n\nKey examples: hospitalsâ†’red family, riversâ†’blue family, forestsâ†’green family, roadsâ†’gray family.\n\nArgs:\n    layer_names: Specific layer names to auto-style (if null, styles all layers needing styling)"
          },
          {
            "name": "check_and_autostyle",
            "enabled": true,
            "prompt_override": "Check for newly uploaded layers that have default styling (blue #3388ff colors) and need initial styling.\n\nIMPORTANT: This tool ONLY works for layers with default styling. Do NOT use this tool when:\n- Users want to change existing styled layers (use style_map_layers instead)\n- Users request colorblind-safe styling (use style_map_layers instead)\n- Users want to restyle any layers that already have custom colors (use style_map_layers instead)\n\nOnly use this tool proactively when detecting newly uploaded layers that need initial styling."
          },
          {
            "name": "apply_color_scheme",
            "enabled": true,
            "prompt_override": "Apply intelligent color schemes to layers based on natural language requests.\n\nSupports:\n- \"colorblind safe\" or \"accessible\" - applies colorblind-safe palette\n- \"Set1\", \"Set2\", \"Spectral\" - applies ColorBrewer schemes\n- \"warm colors\" - applies warm color palette\n- \"cool colors\" - applies cool color palette\n\nEach layer gets a unique color from the scheme to ensure distinguishability.\n\nArgs:\n    scheme_request: Natural language color scheme request\n    layer_names: Specific layers to style (if null, styles all layers)"
          }
        ]
      },
    "query": "Can you show me all the roads that are outside of the protected areas?",
    "geodata_last_results": [],
    "geodata_layers": [
      {
        "id": "layer1",
        "data_source_id": "test",
        "data_type": "GeoJson",
        "data_origin": "TOOL",
        "data_source": "test",
        "data_link": "http://localhost:8000/upload/Roads_all.geojson",
        "name": "Roads_all",
        "title": "Roads_all",
        "description": "",
        "llm_description": "",
        "score": 0,
        "bounding_box": null,
        "layer_type": "GeoJSON",
        "properties": {}
      },
      {
        "id": "layer2",
        "data_source_id": "test",
        "data_type": "GeoJson",
        "data_origin": "TOOL",
        "data_source": "test",
        "data_link": "http://localhost:8000/upload/ProtectedAreas.geojson",
        "name": "ProtectedAreas",
        "title": "ProtectedAreas",
        "description": "",
        "llm_description": "",
        "score": 0,
        "bounding_box": null,
        "layer_type": "GeoJSON",
        "properties": {}
      }
    ]
  },
    "expected_output_geojson": "l1tc10_output.geojson",
    "geom_tolerance": 0.1
  },
  {
    "name": "l1tc11",
    "input_geojsons": {
      "ProtectedAreas.geojson": "ProtectedAreas.geojson",
      "Ecoregions.geojson": "Ecoregions.geojson"
    },
    "payload": {
      "messages": [
        {
          "type": "human",
          "content": "I want to get a single file that contains both the protected areas and the ecoregions."
        }
      ],
      "options": {
        "search_portals": [],
        "geoserver_backends": [],
        "model_settings": {
          "model_provider": "openai",
          "model_name": "gpt-4-nano",
          "max_tokens": 50000,
          "system_prompt": "You are NaLaMap: an advanced geospatial assistant designed to help users without GIS expertise create maps and perform spatial analysis through natural language interaction.\n\n# ROLE AND CAPABILITIES\n- Your primary purpose is to interpret natural language requests about geographic information and translate them into appropriate map visualizations and spatial analyses.\n- You have access to tools for geocoding, querying geographic databases, processing geospatial data, managing map layers, and styling map layers.\n- You can search for specific amenities (e.g., restaurants, parks, hospitals) near a location using the Overpass API.\n- You can style map layers based on natural language descriptions (e.g., 'make the rivers blue', 'thick red borders', 'transparent fill').\n- You're designed to be proactive, guiding users through the map creation process and suggesting potential next steps.\n\n# STATE INFORMATION\n- The public state contains 'geodata_last_results' (previous results) and 'geodata_layers' (geodata selected by the user).\n- The list 'geodata_results' in the state collects tool results, which are presented to the user in a result list.\n- IMPORTANT: When a user asks about a specific dataset, ALWAYS check if that dataset exists in 'geodata_last_results' or 'geodata_layers'.\n- When responding to questions about a dataset, first check if it's available in the state, and use its 'title', 'description', 'llm_description', 'data_source', 'layer_type', 'bounding_box' and other properties to provide specific, detailed information.\n\n# INTERACTION GUIDELINES\n- Be conversational and accessible to users without GIS expertise.\n- AUTOMATIC STYLING PRIORITY: Always check for and automatically style newly uploaded layers at the start of each interaction.\n  - First use check_and_autostyle() to detect layers needing styling.\n  - Then use autostyle_new_layers() to identify which layers need AI-powered styling.\n  - Finally, use your AI reasoning to determine appropriate colors and call style_map_layers() for each layer.\n  - This ensures all new layers get intelligent styling before responding to user queries.\n- Always clarify ambiguous requests by asking specific questions.\n- Proactively guide users through their mapping journey, suggesting potential next steps.\n- When users ask to highlight or visualize a location, use geocoding and layer styling tools.\n- When users want to change the appearance of map layers (colors, thickness, transparency, etc.), use the style_map_layers tool with explicit parameters.\n  - SINGLE LAYER DETECTION: When there's only ONE layer, use no layer_names (auto-applies to that layer).\n  - SPECIFIC LAYER TARGETING: When the user mentions a specific layer name (e.g., 'make the Rivers layer blue'), use layer_names=[\"Rivers\"].\n  - SAME COLOR FOR ALL: When the user wants the SAME color applied to all layers (e.g., 'make everything green'), use one call with no layer_names.\n  - DIFFERENT COLORS FOR EACH: When the user wants DIFFERENT colors for each layer (e.g., 'apply 3 different warm colors'), make separate calls for each layer with layer_names=[\"LayerName\"].\n  - CRITICAL: When using layer_names, use the EXACT layer names from the geodata_layers state. Do NOT modify or truncate the names.\n  - Use standard color names (red, blue, green, coral, peach, brown, darkorange, etc.)â€”these will be converted to proper hex values.\n- AUTOMATIC STYLING: Automatically style all newly uploaded layers based on their names using intelligent AI analysis.\n  - Happens automatically whenever new layers are detected with default #3388ff styling.\n  - Analyze each layer name with AI reasoning (not hardcoded rules) to choose appropriate cartographic colors.\n  - For each layer, make a separate style_map_layers() call using layer_names=[\"LayerName\"] with unique colors.\n  - Always explain your reasoning and consider accessibility, contrast, and cartographic best practices.\n- For amenity searches (e.g., 'restaurants in Paris', 'hospitals near the Colosseum'), use geocode_overpass with the extracted amenity_key and location_name.\n- Explain spatial concepts simply and provide context when showing data.\n- For questions about specific datasets already in the map, use search_metadata to retrieve their metadata.\n\n# DATA HANDLING\n- Help users discover and use external data sources through WFS and WMS.\n- Assist users in uploading and processing their own geospatial data.\n- Connect with open data portals to help users find relevant datasets.\n\nRemember, your goal is to empower users without GIS expertise to create meaningful maps and gain insights from spatial data through natural conversation."
        },
        "tools": [
          {
            "name": "geocode_nominatim",
            "enabled": true,
            "prompt_override": "Geocode an address using OpenStreetMap Nominatim API. Returns Bounding Box for further request and GeoJson of the area to show to the user.\nUse for:  Geocoding specific addresses or when detailed data (e.g., place types) is needed.\nStrengths:\n* Provides detailed polygon data as GeoJSON (e.g. polygons of countries, states, cities) which can be used for map visualization and further analysis.\n* For forward geocoding: Converts place names or addresses into geographic coordinates.\n* Detailed address data, including house numbers, street names, neighborhoods, and postcodes.\n* Provides the geographical extent (min/max latitude and longitude) for places, including cities, countries, and sometimes smaller features like neighborhoods\n* Categorizes results by OSM tags, indicating the type of place (e.g., city, street, building, amenity, shop)\n* Reverse geocoding: Converts geographic coordinates into detailed address information.\nLimitations:\n* Nominatim relies on crowd-sourced OSM data, so accuracy and completeness depend on community contributions.\n* Provides limited metadata. It does not include attributes like population, elevation, time zones, or weather data.\n* Does not support broader geographical queries like finding nearby places, hierarchical relationships beyond administrative divisions."
          },
          {
            "name": "geocode_overpass",
            "enabled": true,
            "prompt_override": "Geocode a location and search for amenities/POIs using the Overpass API.\n\nArgs:\n    state: The current agent state containing geodata and messages.\n    tool_call_id: The tool call ID for the response.\n    query: The user-friendly query/description for the search.\n    amenity_key: The amenity type (e.g. \"restaurant\", \"park\", \"hospital\").\n    location_name: The location to search (e.g. \"Paris\", \"London\", \"Germany\").\n    radius_meters: Search radius in meters (default: 10000).\n    max_results: Maximum number of results to return (default: 2500).\n    timeout: Timeout for API requests in seconds (default: 300).\n\nReturns:\n    A Command object to update the agent state or a dictionary with results."
          },
          {
            "name": "search_librarian",
            "enabled": true,
            "prompt_override": "Tool to find geospatial layers and datasets for a given thematic query.\nUse for:\n* Finding datasets and layers that match a specific thematic query.\n* Finding datasets and layers that match a specific location given user data.\n* Finding datasets that cannot be found using geocoding tools.\nStrengths:\n* Provides a wide range of geospatial data sources, including maps, satellite imagery, and vector data.\n* Allows for flexible queries using natural language, allowing users to search for data by theme, location, or other criteria.\nLimitations:\n* The results are limited to the datasets, layers and regions available in the database.\n* The search is based on similarity, so the results may not always be exact matches to the query.\nquery: the search string to send to the database for a similarity search, like \"Rivers Namibia\"\nmaxRows: the maximum number of results to return, default is 10\nportal_filter: portal name (string) or null\nbbox_wkt: WKT polygon string or null like POLYGON((...)) to limit results to an area\nInform the user that the results are limited to the datasets and layers available in the linked database.\nInform the user about the total number of results for the query.\nAlways use the bounding box to limit the results to a specific area."
          },
          {
            "name": "geoprocess",
            "enabled": true,
            "prompt_override": "Tool to geoprocess a specific geospatial layer from the state.\n\nArgs:\n    state: The agent state containing geodata_layers\n    tool_call_id: ID for this tool call\n    target_layer_id: ID of the specific layer to process. If not provided, will attempt to determine from context.\n    operation: Optional operation hint (buffer, overlay, etc.)\n\nThe tool will apply operations like buffer, overlay, simplify, sjoin, merge, sjoin_nearest, centroid to the specified layer."
          },
          {
            "name": "search_metadata",
            "enabled": true,
            "prompt_override": "Search for a dataset by name/title in the geodata state and return its metadata.\nThis tool is useful when a user asks for information about a specific dataset they've added to the map.\n\nArgs:\n    state: The agent state containing geodata_layers and geodata_last_results\n    tool_call_id: ID for this tool call\n    query: Search string to match against dataset titles or names\n    prioritize_layers: If True, prioritize searching in geodata_layers (datasets added to map)\n\nReturns detailed metadata about matching datasets including description, source, type, etc."
          },
          {
            "name": "style_layers",
            "enabled": true,
            "prompt_override": "Style map layers with visual properties. Tool automatically provides current color context.\n\nCRITICAL: For colorblind-safe, accessibility, or distinguishable styling:\n- NEVER use one call without layer_names (this makes all layers identical!)\n- ALWAYS use separate calls: layer_names=[\"specific_layer\"] with different colors\n\nCOLOR SELECTION GUIDANCE - Use HEX colors (#RRGGBB format):\n\nWARM COLOR SCHEMES - Choose from diverse warm families:\n- Red family: #DC143C, #B22222, #8B0000, #CD5C5C\n- Orange family: #FF4500, #FF6347, #D2691E, #A0522D\n- Yellow family: #FFD700, #DAA520, #B8860B, #F4A460\n- Brown family: #A52A2A, #8B4513, #CD853F, #DEB887\n- Ensure HIGH CONTRAST between layers (avoid similar hues like #FFCC00 vs #FFB300)\n\nCOOL COLOR SCHEMES - Choose from diverse cool families:\n- Blue family: #0000FF, #4169E1, #1E90FF, #87CEEB\n- Green family: #008000, #228B22, #32CD32, #90EE90\n- Purple family: #800080, #9370DB, #8A2BE2, #DDA0DD\n- Teal family: #008080, #20B2AA, #48D1CC, #AFEEEE\n\nCOLORBLIND-SAFE SCHEMES - Use these proven combinations:\n- Orange: #E69F00, Sky Blue: #56B4E9, Green: #009E73\n- Yellow: #F0E442, Blue: #0072B2, Vermillion: #D55E00\n- Purple: #CC79A7, Grey: #999999\n\nEARTH TONE SCHEMES:\n- Browns: #8B4513, #A0522D, #CD853F, #DEB887\n- Greens: #556B2F, #6B8E23, #808000, #9ACD32\n- Tans: #D2B48C, #BC8F8F, #F5DEB3, #DDD8C7\n\nGENERAL PRINCIPLES:\n- Maintain 3:1 contrast ratio minimum between adjacent colors\n- Use darker stroke colors than fill colors for definition\n- Test color combinations for accessibility\n- Consider the map background when choosing colors\n- For 3+ layers, use colors from different families (red, blue, green, not red, pink, coral)\n\nFor uniform appearance (all layers same color):\n- Use one call without layer_names\n- Example: style_map_layers(fill_color=\"#FF0000\", stroke_color=\"#8B0000\")\n\nArgs:\n    layer_names: Target specific layers (REQUIRED for distinguishable styling)\n    fill_color: Fill color as hex (#RRGGBB) - agent should choose intelligently\n    stroke_color: Border color as hex (#RRGGBB) - should be darker than fill\n    stroke_width: Border width in pixels\n    fill_opacity: Fill transparency (0.0 to 1.0)\n    stroke_opacity: Border transparency (0.0 to 1.0)\n    radius: Point marker size\n    dash_pattern: Line dash pattern like \"5,5\""
          },
          {
            "name": "autostyle_new_layers",
            "enabled": true,
            "prompt_override": "Automatically apply intelligent styling to newly uploaded layers with default colors.\n\nThis tool directly applies appropriate cartographic colors based on layer names and descriptions,\nusing the comprehensive automatic styling system that analyzes layer names and applies contextually\nappropriate colors and styles for different geographic feature types.\n\nKey examples: hospitalsâ†’red family, riversâ†’blue family, forestsâ†’green family, roadsâ†’gray family.\n\nArgs:\n    layer_names: Specific layer names to auto-style (if null, styles all layers needing styling)"
          },
          {
            "name": "check_and_autostyle",
            "enabled": true,
            "prompt_override": "Check for newly uploaded layers that have default styling (blue #3388ff colors) and need initial styling.\n\nIMPORTANT: This tool ONLY works for layers with default styling. Do NOT use this tool when:\n- Users want to change existing styled layers (use style_map_layers instead)\n- Users request colorblind-safe styling (use style_map_layers instead)\n- Users want to restyle any layers that already have custom colors (use style_map_layers instead)\n\nOnly use this tool proactively when detecting newly uploaded layers that need initial styling."
          },
          {
            "name": "apply_color_scheme",
            "enabled": true,
            "prompt_override": "Apply intelligent color schemes to layers based on natural language requests.\n\nSupports:\n- \"colorblind safe\" or \"accessible\" - applies colorblind-safe palette\n- \"Set1\", \"Set2\", \"Spectral\" - applies ColorBrewer schemes\n- \"warm colors\" - applies warm color palette\n- \"cool colors\" - applies cool color palette\n\nEach layer gets a unique color from the scheme to ensure distinguishability.\n\nArgs:\n    scheme_request: Natural language color scheme request\n    layer_names: Specific layers to style (if null, styles all layers)"
          }
        ]
      },
    "query": "I want to get a single file that contains both the protected areas and the ecoregions.",
    "geodata_last_results": [],
    "geodata_layers": [
      {
        "id": "layer1",
        "data_source_id": "test",
        "data_type": "GeoJson",
        "data_origin": "TOOL",
        "data_source": "test",
        "data_link": "http://localhost:8000/upload/ProtectedAreas.geojson",
        "name": "ProtectedAreas",
        "title": "ProtectedAreas",
        "description": "",
        "llm_description": "",
        "score": 0,
        "bounding_box": null,
        "layer_type": "GeoJSON",
        "properties": {}
      },
      {
        "id": "layer2",
        "data_source_id": "test",
        "data_type": "GeoJson",
        "data_origin": "TOOL",
        "data_source": "test",
        "data_link": "http://localhost:8000/upload/Ecoregions.geojson",
        "name": "Ecoregions",
        "title": "Ecoregions",
        "description": "",
        "llm_description": "",
        "score": 0,
        "bounding_box": null,
        "layer_type": "GeoJSON",
        "properties": {}
      }
    ]
  },
    "expected_output_geojson": "l1tc11_output.geojson",
    "geom_tolerance": 0.1
  }
]