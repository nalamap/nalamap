worker_processes auto;

events {
  worker_connections 1024;
}

http {
  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;
  sendfile      on;
  tcp_nodelay   on;
  keepalive_timeout 65s;
  keepalive_requests 1000;

  # Name resolution uses container's /etc/hosts and DNS; proxy_pass targets are static after envsubst

  # Logging to stdout/stderr (container friendly)
  log_format timed '$remote_addr - $remote_user [$time_local] "$request" $status $body_bytes_sent '
                   '"$http_referer" "$http_user_agent" rt=$request_time urt=$upstream_response_time';
  access_log /dev/stdout timed;
  error_log  /dev/stderr warn;

  # Set maximum upload size to 100MB
  client_max_body_size 100M;
  server_tokens off;

  # Proper Connection header only when upgrading to WS
  map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
  }

  # Enable SNI for HTTPS upstreams
  proxy_ssl_server_name on;

  server {
    listen 80;
    server_name _;

    # Backend health check passthrough
    # FastAPI exposes /health at the backend root; proxy it here for quick ops checks
      # Nginx self health
      location = /health/nginx {
        default_type application/json;
        return 200 '{"status":"ok","service":"nginx"}';
      }

      # Backend health check passthrough (explicit)
      # FastAPI exposes /health at the backend root; proxy it here for quick ops checks
      location = /health/backend {
      proxy_set_header Host               $host;
      proxy_set_header X-Forwarded-Proto  $scheme;
      proxy_set_header X-Forwarded-Host   $host;
      proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;
        proxy_pass ${BACKEND_PROTOCOL}://${BACKEND_URL}/health;
    }

      # Frontend health: fetch runtime-env.js as a simple readiness probe
      location = /health/frontend {
        proxy_set_header Host               $host;
        proxy_set_header X-Forwarded-Proto  $scheme;
        proxy_set_header X-Forwarded-Host   $host;
        proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;
        proxy_pass ${FRONTEND_PROTOCOL}://${FRONTEND_URL}/runtime-env.js;
      }


    # Frontend (SPA)
    location / {
      proxy_http_version 1.1;
      proxy_set_header Host               $host;
      proxy_set_header X-Forwarded-Proto  $scheme;
      proxy_set_header X-Forwarded-Host   $host;
      proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;

      proxy_set_header Upgrade            $http_upgrade;
      proxy_set_header Connection         $connection_upgrade;

      proxy_pass ${FRONTEND_PROTOCOL}://${FRONTEND_URL};

      proxy_read_timeout 300s;
      proxy_send_timeout 300s;
      proxy_buffering off;
    }

    # API -> backend
    location /api/ {
      proxy_http_version 1.1;
      proxy_set_header Host               $host;
      proxy_set_header X-Forwarded-Proto  $scheme;
      proxy_set_header X-Forwarded-Host   $host;
      proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;

      proxy_set_header Upgrade            $http_upgrade;
      proxy_set_header Connection         $connection_upgrade;

      proxy_pass ${BACKEND_PROTOCOL}://${BACKEND_URL};

      proxy_read_timeout 600s;
      proxy_send_timeout 600s;
      proxy_buffering off;
    }

    # Static uploads served by backend FastAPI at /uploads
    location /uploads/ {
      proxy_http_version 1.1;
      proxy_set_header Host               $host;
      proxy_set_header X-Forwarded-Proto  $scheme;
      proxy_set_header X-Forwarded-Host   $host;
      proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;

      proxy_pass ${BACKEND_PROTOCOL}://${BACKEND_URL};

      proxy_connect_timeout 600s;
      proxy_read_timeout    600s;
      proxy_send_timeout    600s;

      proxy_request_buffering off;
      proxy_max_temp_file_size 0;
      add_header X-Accel-Buffering no;
    }

    # Upload POST endpoint proxy (CORS + long timeouts)
    # Aligns with backend router mounted at /api and frontend default at /api/upload
    location ^~ /api/upload {
      proxy_pass ${BACKEND_PROTOCOL}://${BACKEND_URL};
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $connection_upgrade;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_cache_bypass $http_upgrade;

      # CORS headers and preflight handling for uploads
      add_header 'Access-Control-Allow-Origin' "$http_origin" always;
      add_header 'Access-Control-Allow-Credentials' 'true' always;
      add_header 'Vary' 'Origin' always;

      if ($request_method = OPTIONS) {
        add_header 'Access-Control-Allow-Origin' "$http_origin" always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, PATCH, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, X-Requested-With' always;
        add_header 'Access-Control-Max-Age' 86400 always;
        return 204;
      }

      # Set timeout for uploads (extended for large files)
      proxy_read_timeout 600s;
      proxy_connect_timeout 600s;
      proxy_send_timeout 600s;
    }
  }
}
